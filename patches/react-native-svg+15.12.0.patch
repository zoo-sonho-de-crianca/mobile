diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerDelegate.java
new file mode 100644
index 0000000..9b1276c
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerDelegate.java
@@ -0,0 +1,121 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGCircleManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGCircleManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGCircleManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "cx":
+        mViewManager.setCx(view, new DynamicFromObject(value));
+        break;
+      case "cy":
+        mViewManager.setCy(view, new DynamicFromObject(value));
+        break;
+      case "r":
+        mViewManager.setR(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerInterface.java
new file mode 100644
index 0000000..4e67610
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerInterface.java
@@ -0,0 +1,48 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGCircleManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setCx(T view, Dynamic value);
+  void setCy(T view, Dynamic value);
+  void setR(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerDelegate.java
new file mode 100644
index 0000000..ff17672
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerDelegate.java
@@ -0,0 +1,121 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGClipPathManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGClipPathManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGClipPathManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, new DynamicFromObject(value));
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, new DynamicFromObject(value));
+        break;
+      case "font":
+        mViewManager.setFont(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerInterface.java
new file mode 100644
index 0000000..dcde7e4
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerInterface.java
@@ -0,0 +1,48 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGClipPathManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setFontSize(T view, Dynamic value);
+  void setFontWeight(T view, Dynamic value);
+  void setFont(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerDelegate.java
new file mode 100644
index 0000000..69c54d3
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerDelegate.java
@@ -0,0 +1,65 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGDefsManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGDefsManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGDefsManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerInterface.java
new file mode 100644
index 0000000..d405b61
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerInterface.java
@@ -0,0 +1,29 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGDefsManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerDelegate.java
new file mode 100644
index 0000000..f878c2d
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerDelegate.java
@@ -0,0 +1,124 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGEllipseManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGEllipseManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGEllipseManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "cx":
+        mViewManager.setCx(view, new DynamicFromObject(value));
+        break;
+      case "cy":
+        mViewManager.setCy(view, new DynamicFromObject(value));
+        break;
+      case "rx":
+        mViewManager.setRx(view, new DynamicFromObject(value));
+        break;
+      case "ry":
+        mViewManager.setRy(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerInterface.java
new file mode 100644
index 0000000..e3335fd
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerInterface.java
@@ -0,0 +1,49 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGEllipseManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setCx(T view, Dynamic value);
+  void setCy(T view, Dynamic value);
+  void setRx(T view, Dynamic value);
+  void setRy(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeBlendManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeBlendManagerDelegate.java
new file mode 100644
index 0000000..3708e5c
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeBlendManagerDelegate.java
@@ -0,0 +1,53 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGFeBlendManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGFeBlendManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGFeBlendManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "result":
+        mViewManager.setResult(view, value == null ? null : (String) value);
+        break;
+      case "in1":
+        mViewManager.setIn1(view, value == null ? null : (String) value);
+        break;
+      case "in2":
+        mViewManager.setIn2(view, value == null ? null : (String) value);
+        break;
+      case "mode":
+        mViewManager.setMode(view, (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeBlendManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeBlendManagerInterface.java
new file mode 100644
index 0000000..fb29eed
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeBlendManagerInterface.java
@@ -0,0 +1,25 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+
+public interface RNSVGFeBlendManagerInterface<T extends View> {
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setResult(T view, @Nullable String value);
+  void setIn1(T view, @Nullable String value);
+  void setIn2(T view, @Nullable String value);
+  void setMode(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeColorMatrixManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeColorMatrixManagerDelegate.java
new file mode 100644
index 0000000..4260b9e
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeColorMatrixManagerDelegate.java
@@ -0,0 +1,54 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGFeColorMatrixManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGFeColorMatrixManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGFeColorMatrixManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "result":
+        mViewManager.setResult(view, value == null ? null : (String) value);
+        break;
+      case "in1":
+        mViewManager.setIn1(view, value == null ? null : (String) value);
+        break;
+      case "type":
+        mViewManager.setType(view, (String) value);
+        break;
+      case "values":
+        mViewManager.setValues(view, (ReadableArray) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeColorMatrixManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeColorMatrixManagerInterface.java
new file mode 100644
index 0000000..fef1a08
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeColorMatrixManagerInterface.java
@@ -0,0 +1,26 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGFeColorMatrixManagerInterface<T extends View> {
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setResult(T view, @Nullable String value);
+  void setIn1(T view, @Nullable String value);
+  void setType(T view, @Nullable String value);
+  void setValues(T view, @Nullable ReadableArray value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeCompositeManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeCompositeManagerDelegate.java
new file mode 100644
index 0000000..d1eb60b
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeCompositeManagerDelegate.java
@@ -0,0 +1,65 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGFeCompositeManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGFeCompositeManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGFeCompositeManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "result":
+        mViewManager.setResult(view, value == null ? null : (String) value);
+        break;
+      case "in1":
+        mViewManager.setIn1(view, value == null ? null : (String) value);
+        break;
+      case "in2":
+        mViewManager.setIn2(view, value == null ? null : (String) value);
+        break;
+      case "operator1":
+        mViewManager.setOperator1(view, (String) value);
+        break;
+      case "k1":
+        mViewManager.setK1(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "k2":
+        mViewManager.setK2(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "k3":
+        mViewManager.setK3(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "k4":
+        mViewManager.setK4(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeCompositeManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeCompositeManagerInterface.java
new file mode 100644
index 0000000..95c9259
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeCompositeManagerInterface.java
@@ -0,0 +1,29 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+
+public interface RNSVGFeCompositeManagerInterface<T extends View> {
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setResult(T view, @Nullable String value);
+  void setIn1(T view, @Nullable String value);
+  void setIn2(T view, @Nullable String value);
+  void setOperator1(T view, @Nullable String value);
+  void setK1(T view, float value);
+  void setK2(T view, float value);
+  void setK3(T view, float value);
+  void setK4(T view, float value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeFloodManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeFloodManagerDelegate.java
new file mode 100644
index 0000000..9c57aa2
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeFloodManagerDelegate.java
@@ -0,0 +1,50 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGFeFloodManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGFeFloodManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGFeFloodManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "result":
+        mViewManager.setResult(view, value == null ? null : (String) value);
+        break;
+      case "floodColor":
+        mViewManager.setFloodColor(view, new DynamicFromObject(value));
+        break;
+      case "floodOpacity":
+        mViewManager.setFloodOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeFloodManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeFloodManagerInterface.java
new file mode 100644
index 0000000..0f9fc0f
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeFloodManagerInterface.java
@@ -0,0 +1,24 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+
+public interface RNSVGFeFloodManagerInterface<T extends View> {
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setResult(T view, @Nullable String value);
+  void setFloodColor(T view, Dynamic value);
+  void setFloodOpacity(T view, float value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeGaussianBlurManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeGaussianBlurManagerDelegate.java
new file mode 100644
index 0000000..f46db4f
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeGaussianBlurManagerDelegate.java
@@ -0,0 +1,56 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGFeGaussianBlurManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGFeGaussianBlurManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGFeGaussianBlurManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "result":
+        mViewManager.setResult(view, value == null ? null : (String) value);
+        break;
+      case "in1":
+        mViewManager.setIn1(view, value == null ? null : (String) value);
+        break;
+      case "stdDeviationX":
+        mViewManager.setStdDeviationX(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "stdDeviationY":
+        mViewManager.setStdDeviationY(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "edgeMode":
+        mViewManager.setEdgeMode(view, (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeGaussianBlurManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeGaussianBlurManagerInterface.java
new file mode 100644
index 0000000..089eb3d
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeGaussianBlurManagerInterface.java
@@ -0,0 +1,26 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+
+public interface RNSVGFeGaussianBlurManagerInterface<T extends View> {
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setResult(T view, @Nullable String value);
+  void setIn1(T view, @Nullable String value);
+  void setStdDeviationX(T view, float value);
+  void setStdDeviationY(T view, float value);
+  void setEdgeMode(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeMergeManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeMergeManagerDelegate.java
new file mode 100644
index 0000000..743133a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeMergeManagerDelegate.java
@@ -0,0 +1,48 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGFeMergeManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGFeMergeManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGFeMergeManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "result":
+        mViewManager.setResult(view, value == null ? null : (String) value);
+        break;
+      case "nodes":
+        mViewManager.setNodes(view, (ReadableArray) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeMergeManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeMergeManagerInterface.java
new file mode 100644
index 0000000..1721639
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeMergeManagerInterface.java
@@ -0,0 +1,24 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGFeMergeManagerInterface<T extends View> {
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setResult(T view, @Nullable String value);
+  void setNodes(T view, @Nullable ReadableArray value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeOffsetManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeOffsetManagerDelegate.java
new file mode 100644
index 0000000..6458442
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeOffsetManagerDelegate.java
@@ -0,0 +1,53 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGFeOffsetManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGFeOffsetManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGFeOffsetManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "result":
+        mViewManager.setResult(view, value == null ? null : (String) value);
+        break;
+      case "in1":
+        mViewManager.setIn1(view, value == null ? null : (String) value);
+        break;
+      case "dx":
+        mViewManager.setDx(view, new DynamicFromObject(value));
+        break;
+      case "dy":
+        mViewManager.setDy(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeOffsetManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeOffsetManagerInterface.java
new file mode 100644
index 0000000..adf76fd
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFeOffsetManagerInterface.java
@@ -0,0 +1,25 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+
+public interface RNSVGFeOffsetManagerInterface<T extends View> {
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setResult(T view, @Nullable String value);
+  void setIn1(T view, @Nullable String value);
+  void setDx(T view, Dynamic value);
+  void setDy(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFilterManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFilterManagerDelegate.java
new file mode 100644
index 0000000..86d3dd7
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFilterManagerDelegate.java
@@ -0,0 +1,50 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGFilterManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGFilterManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGFilterManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "filterUnits":
+        mViewManager.setFilterUnits(view, (String) value);
+        break;
+      case "primitiveUnits":
+        mViewManager.setPrimitiveUnits(view, (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFilterManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFilterManagerInterface.java
new file mode 100644
index 0000000..80417fa
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGFilterManagerInterface.java
@@ -0,0 +1,24 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+
+public interface RNSVGFilterManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setFilterUnits(T view, @Nullable String value);
+  void setPrimitiveUnits(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerDelegate.java
new file mode 100644
index 0000000..7061119
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerDelegate.java
@@ -0,0 +1,133 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGForeignObjectManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGForeignObjectManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGForeignObjectManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, new DynamicFromObject(value));
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, new DynamicFromObject(value));
+        break;
+      case "font":
+        mViewManager.setFont(view, new DynamicFromObject(value));
+        break;
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerInterface.java
new file mode 100644
index 0000000..a8aef14
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerInterface.java
@@ -0,0 +1,52 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGForeignObjectManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setFontSize(T view, Dynamic value);
+  void setFontWeight(T view, Dynamic value);
+  void setFont(T view, Dynamic value);
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerDelegate.java
new file mode 100644
index 0000000..fdcf2fc
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerDelegate.java
@@ -0,0 +1,121 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGGroupManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGGroupManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGGroupManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, new DynamicFromObject(value));
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, new DynamicFromObject(value));
+        break;
+      case "font":
+        mViewManager.setFont(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerInterface.java
new file mode 100644
index 0000000..79dab3a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerInterface.java
@@ -0,0 +1,48 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGGroupManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setFontSize(T view, Dynamic value);
+  void setFontWeight(T view, Dynamic value);
+  void setFont(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerDelegate.java
new file mode 100644
index 0000000..d634b10
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerDelegate.java
@@ -0,0 +1,134 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGImageManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGImageManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGImageManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "src":
+        mViewManager.setSrc(view, (ReadableMap) value);
+        break;
+      case "align":
+        mViewManager.setAlign(view, value == null ? null : (String) value);
+        break;
+      case "meetOrSlice":
+        mViewManager.setMeetOrSlice(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerInterface.java
new file mode 100644
index 0000000..8e9ee1c
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerInterface.java
@@ -0,0 +1,53 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGImageManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setSrc(T view, @Nullable ReadableMap value);
+  void setAlign(T view, @Nullable String value);
+  void setMeetOrSlice(T view, int value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerDelegate.java
new file mode 100644
index 0000000..99e45ec
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerDelegate.java
@@ -0,0 +1,124 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGLineManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGLineManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGLineManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "x1":
+        mViewManager.setX1(view, new DynamicFromObject(value));
+        break;
+      case "y1":
+        mViewManager.setY1(view, new DynamicFromObject(value));
+        break;
+      case "x2":
+        mViewManager.setX2(view, new DynamicFromObject(value));
+        break;
+      case "y2":
+        mViewManager.setY2(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerInterface.java
new file mode 100644
index 0000000..53cedba
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerInterface.java
@@ -0,0 +1,49 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGLineManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setX1(T view, Dynamic value);
+  void setY1(T view, Dynamic value);
+  void setX2(T view, Dynamic value);
+  void setY2(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerDelegate.java
new file mode 100644
index 0000000..a49f599
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerDelegate.java
@@ -0,0 +1,87 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGLinearGradientManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGLinearGradientManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGLinearGradientManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "x1":
+        mViewManager.setX1(view, new DynamicFromObject(value));
+        break;
+      case "y1":
+        mViewManager.setY1(view, new DynamicFromObject(value));
+        break;
+      case "x2":
+        mViewManager.setX2(view, new DynamicFromObject(value));
+        break;
+      case "y2":
+        mViewManager.setY2(view, new DynamicFromObject(value));
+        break;
+      case "gradient":
+        mViewManager.setGradient(view, (ReadableArray) value);
+        break;
+      case "gradientUnits":
+        mViewManager.setGradientUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "gradientTransform":
+        mViewManager.setGradientTransform(view, (ReadableArray) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerInterface.java
new file mode 100644
index 0000000..8da9270
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerInterface.java
@@ -0,0 +1,37 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGLinearGradientManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setX1(T view, Dynamic value);
+  void setY1(T view, Dynamic value);
+  void setX2(T view, Dynamic value);
+  void setY2(T view, Dynamic value);
+  void setGradient(T view, @Nullable ReadableArray value);
+  void setGradientUnits(T view, int value);
+  void setGradientTransform(T view, @Nullable ReadableArray value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerDelegate.java
new file mode 100644
index 0000000..4815e33
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerDelegate.java
@@ -0,0 +1,157 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGMarkerManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGMarkerManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGMarkerManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, new DynamicFromObject(value));
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, new DynamicFromObject(value));
+        break;
+      case "font":
+        mViewManager.setFont(view, new DynamicFromObject(value));
+        break;
+      case "refX":
+        mViewManager.setRefX(view, new DynamicFromObject(value));
+        break;
+      case "refY":
+        mViewManager.setRefY(view, new DynamicFromObject(value));
+        break;
+      case "markerHeight":
+        mViewManager.setMarkerHeight(view, new DynamicFromObject(value));
+        break;
+      case "markerWidth":
+        mViewManager.setMarkerWidth(view, new DynamicFromObject(value));
+        break;
+      case "markerUnits":
+        mViewManager.setMarkerUnits(view, value == null ? null : (String) value);
+        break;
+      case "orient":
+        mViewManager.setOrient(view, value == null ? null : (String) value);
+        break;
+      case "minX":
+        mViewManager.setMinX(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "minY":
+        mViewManager.setMinY(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbWidth":
+        mViewManager.setVbWidth(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbHeight":
+        mViewManager.setVbHeight(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "align":
+        mViewManager.setAlign(view, value == null ? null : (String) value);
+        break;
+      case "meetOrSlice":
+        mViewManager.setMeetOrSlice(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerInterface.java
new file mode 100644
index 0000000..9ff3cd0
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerInterface.java
@@ -0,0 +1,60 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGMarkerManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setFontSize(T view, Dynamic value);
+  void setFontWeight(T view, Dynamic value);
+  void setFont(T view, Dynamic value);
+  void setRefX(T view, Dynamic value);
+  void setRefY(T view, Dynamic value);
+  void setMarkerHeight(T view, Dynamic value);
+  void setMarkerWidth(T view, Dynamic value);
+  void setMarkerUnits(T view, @Nullable String value);
+  void setOrient(T view, @Nullable String value);
+  void setMinX(T view, float value);
+  void setMinY(T view, float value);
+  void setVbWidth(T view, float value);
+  void setVbHeight(T view, float value);
+  void setAlign(T view, @Nullable String value);
+  void setMeetOrSlice(T view, int value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerDelegate.java
new file mode 100644
index 0000000..f30e40e
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerDelegate.java
@@ -0,0 +1,142 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGMaskManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGMaskManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGMaskManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, new DynamicFromObject(value));
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, new DynamicFromObject(value));
+        break;
+      case "font":
+        mViewManager.setFont(view, new DynamicFromObject(value));
+        break;
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "maskUnits":
+        mViewManager.setMaskUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "maskContentUnits":
+        mViewManager.setMaskContentUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "maskType":
+        mViewManager.setMaskType(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerInterface.java
new file mode 100644
index 0000000..3dfc74a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerInterface.java
@@ -0,0 +1,55 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGMaskManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setFontSize(T view, Dynamic value);
+  void setFontWeight(T view, Dynamic value);
+  void setFont(T view, Dynamic value);
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setMaskUnits(T view, int value);
+  void setMaskContentUnits(T view, int value);
+  void setMaskType(T view, int value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerDelegate.java
new file mode 100644
index 0000000..9065905
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerDelegate.java
@@ -0,0 +1,115 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGPathManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGPathManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGPathManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "d":
+        mViewManager.setD(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerInterface.java
new file mode 100644
index 0000000..00484fb
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerInterface.java
@@ -0,0 +1,46 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGPathManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setD(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerDelegate.java
new file mode 100644
index 0000000..dcc2f45
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerDelegate.java
@@ -0,0 +1,160 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGPatternManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGPatternManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGPatternManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, new DynamicFromObject(value));
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, new DynamicFromObject(value));
+        break;
+      case "font":
+        mViewManager.setFont(view, new DynamicFromObject(value));
+        break;
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "patternUnits":
+        mViewManager.setPatternUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "patternContentUnits":
+        mViewManager.setPatternContentUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "patternTransform":
+        mViewManager.setPatternTransform(view, (ReadableArray) value);
+        break;
+      case "minX":
+        mViewManager.setMinX(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "minY":
+        mViewManager.setMinY(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbWidth":
+        mViewManager.setVbWidth(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbHeight":
+        mViewManager.setVbHeight(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "align":
+        mViewManager.setAlign(view, value == null ? null : (String) value);
+        break;
+      case "meetOrSlice":
+        mViewManager.setMeetOrSlice(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerInterface.java
new file mode 100644
index 0000000..01271d1
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerInterface.java
@@ -0,0 +1,61 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGPatternManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setFontSize(T view, Dynamic value);
+  void setFontWeight(T view, Dynamic value);
+  void setFont(T view, Dynamic value);
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setPatternUnits(T view, int value);
+  void setPatternContentUnits(T view, int value);
+  void setPatternTransform(T view, @Nullable ReadableArray value);
+  void setMinX(T view, float value);
+  void setMinY(T view, float value);
+  void setVbWidth(T view, float value);
+  void setVbHeight(T view, float value);
+  void setAlign(T view, @Nullable String value);
+  void setMeetOrSlice(T view, int value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerDelegate.java
new file mode 100644
index 0000000..5ba3370
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerDelegate.java
@@ -0,0 +1,93 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGRadialGradientManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGRadialGradientManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGRadialGradientManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fx":
+        mViewManager.setFx(view, new DynamicFromObject(value));
+        break;
+      case "fy":
+        mViewManager.setFy(view, new DynamicFromObject(value));
+        break;
+      case "cx":
+        mViewManager.setCx(view, new DynamicFromObject(value));
+        break;
+      case "cy":
+        mViewManager.setCy(view, new DynamicFromObject(value));
+        break;
+      case "rx":
+        mViewManager.setRx(view, new DynamicFromObject(value));
+        break;
+      case "ry":
+        mViewManager.setRy(view, new DynamicFromObject(value));
+        break;
+      case "gradient":
+        mViewManager.setGradient(view, (ReadableArray) value);
+        break;
+      case "gradientUnits":
+        mViewManager.setGradientUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "gradientTransform":
+        mViewManager.setGradientTransform(view, (ReadableArray) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerInterface.java
new file mode 100644
index 0000000..e7994c0
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerInterface.java
@@ -0,0 +1,39 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGRadialGradientManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFx(T view, Dynamic value);
+  void setFy(T view, Dynamic value);
+  void setCx(T view, Dynamic value);
+  void setCy(T view, Dynamic value);
+  void setRx(T view, Dynamic value);
+  void setRy(T view, Dynamic value);
+  void setGradient(T view, @Nullable ReadableArray value);
+  void setGradientUnits(T view, int value);
+  void setGradientTransform(T view, @Nullable ReadableArray value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerDelegate.java
new file mode 100644
index 0000000..0a48de1
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerDelegate.java
@@ -0,0 +1,130 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGRectManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGRectManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGRectManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      case "rx":
+        mViewManager.setRx(view, new DynamicFromObject(value));
+        break;
+      case "ry":
+        mViewManager.setRy(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerInterface.java
new file mode 100644
index 0000000..580f1d8
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerInterface.java
@@ -0,0 +1,51 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGRectManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+  void setRx(T view, Dynamic value);
+  void setRy(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewAndroidManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewAndroidManagerDelegate.java
new file mode 100644
index 0000000..f074492
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewAndroidManagerDelegate.java
@@ -0,0 +1,175 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGSvgViewAndroidManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGSvgViewAndroidManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGSvgViewAndroidManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "bbWidth":
+        mViewManager.setBbWidth(view, new DynamicFromObject(value));
+        break;
+      case "bbHeight":
+        mViewManager.setBbHeight(view, new DynamicFromObject(value));
+        break;
+      case "minX":
+        mViewManager.setMinX(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "minY":
+        mViewManager.setMinY(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbWidth":
+        mViewManager.setVbWidth(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbHeight":
+        mViewManager.setVbHeight(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "align":
+        mViewManager.setAlign(view, value == null ? null : (String) value);
+        break;
+      case "meetOrSlice":
+        mViewManager.setMeetOrSlice(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "hasTVPreferredFocus":
+        mViewManager.setHasTVPreferredFocus(view, value == null ? false : (boolean) value);
+        break;
+      case "borderBottomColor":
+        mViewManager.setBorderBottomColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "nextFocusDown":
+        mViewManager.setNextFocusDown(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "borderRightColor":
+        mViewManager.setBorderRightColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "nextFocusRight":
+        mViewManager.setNextFocusRight(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "borderLeftColor":
+        mViewManager.setBorderLeftColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "borderColor":
+        mViewManager.setBorderColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "removeClippedSubviews":
+        mViewManager.setRemoveClippedSubviews(view, value == null ? false : (boolean) value);
+        break;
+      case "nextFocusForward":
+        mViewManager.setNextFocusForward(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "nextFocusUp":
+        mViewManager.setNextFocusUp(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "accessible":
+        mViewManager.setAccessible(view, value == null ? false : (boolean) value);
+        break;
+      case "borderStartColor":
+        mViewManager.setBorderStartColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "borderEndColor":
+        mViewManager.setBorderEndColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "focusable":
+        mViewManager.setFocusable(view, value == null ? false : (boolean) value);
+        break;
+      case "nativeBackgroundAndroid":
+        mViewManager.setNativeBackgroundAndroid(view, (ReadableMap) value);
+        break;
+      case "nativeForegroundAndroid":
+        mViewManager.setNativeForegroundAndroid(view, (ReadableMap) value);
+        break;
+      case "backfaceVisibility":
+        mViewManager.setBackfaceVisibility(view, value == null ? null : (String) value);
+        break;
+      case "borderStyle":
+        mViewManager.setBorderStyle(view, value == null ? null : (String) value);
+        break;
+      case "needsOffscreenAlphaCompositing":
+        mViewManager.setNeedsOffscreenAlphaCompositing(view, value == null ? false : (boolean) value);
+        break;
+      case "hitSlop":
+        mViewManager.setHitSlop(view, new DynamicFromObject(value));
+        break;
+      case "borderTopColor":
+        mViewManager.setBorderTopColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "nextFocusLeft":
+        mViewManager.setNextFocusLeft(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "borderBlockColor":
+        mViewManager.setBorderBlockColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "borderBlockEndColor":
+        mViewManager.setBorderBlockEndColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "borderBlockStartColor":
+        mViewManager.setBorderBlockStartColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "borderRadius":
+        mViewManager.setBorderRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderTopLeftRadius":
+        mViewManager.setBorderTopLeftRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderTopRightRadius":
+        mViewManager.setBorderTopRightRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderBottomRightRadius":
+        mViewManager.setBorderBottomRightRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderBottomLeftRadius":
+        mViewManager.setBorderBottomLeftRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderTopStartRadius":
+        mViewManager.setBorderTopStartRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderTopEndRadius":
+        mViewManager.setBorderTopEndRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderBottomStartRadius":
+        mViewManager.setBorderBottomStartRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderBottomEndRadius":
+        mViewManager.setBorderBottomEndRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderEndEndRadius":
+        mViewManager.setBorderEndEndRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderEndStartRadius":
+        mViewManager.setBorderEndStartRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderStartEndRadius":
+        mViewManager.setBorderStartEndRadius(view, new DynamicFromObject(value));
+        break;
+      case "borderStartStartRadius":
+        mViewManager.setBorderStartStartRadius(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewAndroidManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewAndroidManagerInterface.java
new file mode 100644
index 0000000..c5f724a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewAndroidManagerInterface.java
@@ -0,0 +1,66 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGSvgViewAndroidManagerInterface<T extends View> {
+  void setBbWidth(T view, Dynamic value);
+  void setBbHeight(T view, Dynamic value);
+  void setMinX(T view, float value);
+  void setMinY(T view, float value);
+  void setVbWidth(T view, float value);
+  void setVbHeight(T view, float value);
+  void setAlign(T view, @Nullable String value);
+  void setMeetOrSlice(T view, int value);
+  void setColor(T view, @Nullable Integer value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setHasTVPreferredFocus(T view, boolean value);
+  void setBorderBottomColor(T view, @Nullable Integer value);
+  void setNextFocusDown(T view, int value);
+  void setBorderRightColor(T view, @Nullable Integer value);
+  void setNextFocusRight(T view, int value);
+  void setBorderLeftColor(T view, @Nullable Integer value);
+  void setBorderColor(T view, @Nullable Integer value);
+  void setRemoveClippedSubviews(T view, boolean value);
+  void setNextFocusForward(T view, int value);
+  void setNextFocusUp(T view, int value);
+  void setAccessible(T view, boolean value);
+  void setBorderStartColor(T view, @Nullable Integer value);
+  void setBorderEndColor(T view, @Nullable Integer value);
+  void setFocusable(T view, boolean value);
+  void setNativeBackgroundAndroid(T view, @Nullable ReadableMap value);
+  void setNativeForegroundAndroid(T view, @Nullable ReadableMap value);
+  void setBackfaceVisibility(T view, @Nullable String value);
+  void setBorderStyle(T view, @Nullable String value);
+  void setNeedsOffscreenAlphaCompositing(T view, boolean value);
+  void setHitSlop(T view, Dynamic value);
+  void setBorderTopColor(T view, @Nullable Integer value);
+  void setNextFocusLeft(T view, int value);
+  void setBorderBlockColor(T view, @Nullable Integer value);
+  void setBorderBlockEndColor(T view, @Nullable Integer value);
+  void setBorderBlockStartColor(T view, @Nullable Integer value);
+  void setBorderRadius(T view, Dynamic value);
+  void setBorderTopLeftRadius(T view, Dynamic value);
+  void setBorderTopRightRadius(T view, Dynamic value);
+  void setBorderBottomRightRadius(T view, Dynamic value);
+  void setBorderBottomLeftRadius(T view, Dynamic value);
+  void setBorderTopStartRadius(T view, Dynamic value);
+  void setBorderTopEndRadius(T view, Dynamic value);
+  void setBorderBottomStartRadius(T view, Dynamic value);
+  void setBorderBottomEndRadius(T view, Dynamic value);
+  void setBorderEndEndRadius(T view, Dynamic value);
+  void setBorderEndStartRadius(T view, Dynamic value);
+  void setBorderStartEndRadius(T view, Dynamic value);
+  void setBorderStartStartRadius(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerDelegate.java
new file mode 100644
index 0000000..d45e6a7
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerDelegate.java
@@ -0,0 +1,139 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGSymbolManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGSymbolManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGSymbolManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, new DynamicFromObject(value));
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, new DynamicFromObject(value));
+        break;
+      case "font":
+        mViewManager.setFont(view, new DynamicFromObject(value));
+        break;
+      case "minX":
+        mViewManager.setMinX(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "minY":
+        mViewManager.setMinY(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbWidth":
+        mViewManager.setVbWidth(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbHeight":
+        mViewManager.setVbHeight(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "align":
+        mViewManager.setAlign(view, value == null ? null : (String) value);
+        break;
+      case "meetOrSlice":
+        mViewManager.setMeetOrSlice(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerInterface.java
new file mode 100644
index 0000000..d4c5a7c
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerInterface.java
@@ -0,0 +1,54 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGSymbolManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setFontSize(T view, Dynamic value);
+  void setFontWeight(T view, Dynamic value);
+  void setFont(T view, Dynamic value);
+  void setMinX(T view, float value);
+  void setMinY(T view, float value);
+  void setVbWidth(T view, float value);
+  void setVbHeight(T view, float value);
+  void setAlign(T view, @Nullable String value);
+  void setMeetOrSlice(T view, int value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerDelegate.java
new file mode 100644
index 0000000..0a7733f
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerDelegate.java
@@ -0,0 +1,157 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGTSpanManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGTSpanManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGTSpanManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, new DynamicFromObject(value));
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, new DynamicFromObject(value));
+        break;
+      case "font":
+        mViewManager.setFont(view, new DynamicFromObject(value));
+        break;
+      case "dx":
+        mViewManager.setDx(view, new DynamicFromObject(value));
+        break;
+      case "dy":
+        mViewManager.setDy(view, new DynamicFromObject(value));
+        break;
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "rotate":
+        mViewManager.setRotate(view, new DynamicFromObject(value));
+        break;
+      case "inlineSize":
+        mViewManager.setInlineSize(view, new DynamicFromObject(value));
+        break;
+      case "textLength":
+        mViewManager.setTextLength(view, new DynamicFromObject(value));
+        break;
+      case "baselineShift":
+        mViewManager.setBaselineShift(view, new DynamicFromObject(value));
+        break;
+      case "lengthAdjust":
+        mViewManager.setLengthAdjust(view, value == null ? null : (String) value);
+        break;
+      case "alignmentBaseline":
+        mViewManager.setAlignmentBaseline(view, value == null ? null : (String) value);
+        break;
+      case "verticalAlign":
+        mViewManager.setVerticalAlign(view, new DynamicFromObject(value));
+        break;
+      case "content":
+        mViewManager.setContent(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerInterface.java
new file mode 100644
index 0000000..7f23f5a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerInterface.java
@@ -0,0 +1,60 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGTSpanManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setFontSize(T view, Dynamic value);
+  void setFontWeight(T view, Dynamic value);
+  void setFont(T view, Dynamic value);
+  void setDx(T view, Dynamic value);
+  void setDy(T view, Dynamic value);
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setRotate(T view, Dynamic value);
+  void setInlineSize(T view, Dynamic value);
+  void setTextLength(T view, Dynamic value);
+  void setBaselineShift(T view, Dynamic value);
+  void setLengthAdjust(T view, @Nullable String value);
+  void setAlignmentBaseline(T view, @Nullable String value);
+  void setVerticalAlign(T view, Dynamic value);
+  void setContent(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerDelegate.java
new file mode 100644
index 0000000..08bfc44
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerDelegate.java
@@ -0,0 +1,154 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGTextManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGTextManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGTextManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, new DynamicFromObject(value));
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, new DynamicFromObject(value));
+        break;
+      case "font":
+        mViewManager.setFont(view, new DynamicFromObject(value));
+        break;
+      case "dx":
+        mViewManager.setDx(view, new DynamicFromObject(value));
+        break;
+      case "dy":
+        mViewManager.setDy(view, new DynamicFromObject(value));
+        break;
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "rotate":
+        mViewManager.setRotate(view, new DynamicFromObject(value));
+        break;
+      case "inlineSize":
+        mViewManager.setInlineSize(view, new DynamicFromObject(value));
+        break;
+      case "textLength":
+        mViewManager.setTextLength(view, new DynamicFromObject(value));
+        break;
+      case "baselineShift":
+        mViewManager.setBaselineShift(view, new DynamicFromObject(value));
+        break;
+      case "lengthAdjust":
+        mViewManager.setLengthAdjust(view, value == null ? null : (String) value);
+        break;
+      case "alignmentBaseline":
+        mViewManager.setAlignmentBaseline(view, value == null ? null : (String) value);
+        break;
+      case "verticalAlign":
+        mViewManager.setVerticalAlign(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerInterface.java
new file mode 100644
index 0000000..2b0d3f6
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerInterface.java
@@ -0,0 +1,59 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGTextManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setFontSize(T view, Dynamic value);
+  void setFontWeight(T view, Dynamic value);
+  void setFont(T view, Dynamic value);
+  void setDx(T view, Dynamic value);
+  void setDy(T view, Dynamic value);
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setRotate(T view, Dynamic value);
+  void setInlineSize(T view, Dynamic value);
+  void setTextLength(T view, Dynamic value);
+  void setBaselineShift(T view, Dynamic value);
+  void setLengthAdjust(T view, @Nullable String value);
+  void setAlignmentBaseline(T view, @Nullable String value);
+  void setVerticalAlign(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerDelegate.java
new file mode 100644
index 0000000..7272363
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerDelegate.java
@@ -0,0 +1,172 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGTextPathManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGTextPathManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGTextPathManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, new DynamicFromObject(value));
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, new DynamicFromObject(value));
+        break;
+      case "font":
+        mViewManager.setFont(view, new DynamicFromObject(value));
+        break;
+      case "dx":
+        mViewManager.setDx(view, new DynamicFromObject(value));
+        break;
+      case "dy":
+        mViewManager.setDy(view, new DynamicFromObject(value));
+        break;
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "rotate":
+        mViewManager.setRotate(view, new DynamicFromObject(value));
+        break;
+      case "inlineSize":
+        mViewManager.setInlineSize(view, new DynamicFromObject(value));
+        break;
+      case "textLength":
+        mViewManager.setTextLength(view, new DynamicFromObject(value));
+        break;
+      case "baselineShift":
+        mViewManager.setBaselineShift(view, new DynamicFromObject(value));
+        break;
+      case "lengthAdjust":
+        mViewManager.setLengthAdjust(view, value == null ? null : (String) value);
+        break;
+      case "alignmentBaseline":
+        mViewManager.setAlignmentBaseline(view, value == null ? null : (String) value);
+        break;
+      case "verticalAlign":
+        mViewManager.setVerticalAlign(view, new DynamicFromObject(value));
+        break;
+      case "href":
+        mViewManager.setHref(view, value == null ? null : (String) value);
+        break;
+      case "side":
+        mViewManager.setSide(view, value == null ? null : (String) value);
+        break;
+      case "method":
+        mViewManager.setMethod(view, value == null ? null : (String) value);
+        break;
+      case "midLine":
+        mViewManager.setMidLine(view, value == null ? null : (String) value);
+        break;
+      case "spacing":
+        mViewManager.setSpacing(view, value == null ? null : (String) value);
+        break;
+      case "startOffset":
+        mViewManager.setStartOffset(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerInterface.java
new file mode 100644
index 0000000..9479a9f
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerInterface.java
@@ -0,0 +1,65 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGTextPathManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setFontSize(T view, Dynamic value);
+  void setFontWeight(T view, Dynamic value);
+  void setFont(T view, Dynamic value);
+  void setDx(T view, Dynamic value);
+  void setDy(T view, Dynamic value);
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setRotate(T view, Dynamic value);
+  void setInlineSize(T view, Dynamic value);
+  void setTextLength(T view, Dynamic value);
+  void setBaselineShift(T view, Dynamic value);
+  void setLengthAdjust(T view, @Nullable String value);
+  void setAlignmentBaseline(T view, @Nullable String value);
+  void setVerticalAlign(T view, Dynamic value);
+  void setHref(T view, @Nullable String value);
+  void setSide(T view, @Nullable String value);
+  void setMethod(T view, @Nullable String value);
+  void setMidLine(T view, @Nullable String value);
+  void setSpacing(T view, @Nullable String value);
+  void setStartOffset(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerDelegate.java
new file mode 100644
index 0000000..a12c384
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerDelegate.java
@@ -0,0 +1,127 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.DynamicFromObject;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGUseManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGUseManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGUseManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "fill":
+        mViewManager.setFill(view, new DynamicFromObject(value));
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, new DynamicFromObject(value));
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, new DynamicFromObject(value));
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, new DynamicFromObject(value));
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "filter":
+        mViewManager.setFilter(view, value == null ? null : (String) value);
+        break;
+      case "href":
+        mViewManager.setHref(view, value == null ? null : (String) value);
+        break;
+      case "x":
+        mViewManager.setX(view, new DynamicFromObject(value));
+        break;
+      case "y":
+        mViewManager.setY(view, new DynamicFromObject(value));
+        break;
+      case "height":
+        mViewManager.setHeight(view, new DynamicFromObject(value));
+        break;
+      case "width":
+        mViewManager.setWidth(view, new DynamicFromObject(value));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerInterface.java
new file mode 100644
index 0000000..0bda3e4
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerInterface.java
@@ -0,0 +1,50 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Dynamic;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGUseManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setColor(T view, @Nullable Integer value);
+  void setFill(T view, Dynamic value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, Dynamic value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, Dynamic value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, Dynamic value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFilter(T view, @Nullable String value);
+  void setHref(T view, @Nullable String value);
+  void setX(T view, Dynamic value);
+  void setY(T view, Dynamic value);
+  void setHeight(T view, Dynamic value);
+  void setWidth(T view, Dynamic value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/horcrux/svg/NativeSvgRenderableModuleSpec.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/horcrux/svg/NativeSvgRenderableModuleSpec.java
new file mode 100644
index 0000000..39f8098
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/horcrux/svg/NativeSvgRenderableModuleSpec.java
@@ -0,0 +1,69 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package com.horcrux.svg;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.Promise;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.bridge.WritableMap;
+import com.facebook.react.turbomodule.core.interfaces.TurboModule;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+public abstract class NativeSvgRenderableModuleSpec extends ReactContextBaseJavaModule implements TurboModule {
+  public static final String NAME = "RNSVGRenderableModule";
+
+  public NativeSvgRenderableModuleSpec(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+  @Override
+  public @Nonnull String getName() {
+    return NAME;
+  }
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract boolean isPointInFill(@Nullable Double tag, @Nullable ReadableMap options);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract boolean isPointInStroke(@Nullable Double tag, @Nullable ReadableMap options);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract double getTotalLength(@Nullable Double tag);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract WritableMap getPointAtLength(@Nullable Double tag, @Nullable ReadableMap options);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract WritableMap getBBox(@Nullable Double tag, @Nullable ReadableMap options);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract WritableMap getCTM(@Nullable Double tag);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract WritableMap getScreenCTM(@Nullable Double tag);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void getRawResource(String name, Promise promise);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/horcrux/svg/NativeSvgViewModuleSpec.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/horcrux/svg/NativeSvgViewModuleSpec.java
new file mode 100644
index 0000000..4ad70b8
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/horcrux/svg/NativeSvgViewModuleSpec.java
@@ -0,0 +1,40 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package com.horcrux.svg;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.Callback;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.turbomodule.core.interfaces.TurboModule;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+public abstract class NativeSvgViewModuleSpec extends ReactContextBaseJavaModule implements TurboModule {
+  public static final String NAME = "RNSVGSvgViewModule";
+
+  public NativeSvgViewModuleSpec(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+  @Override
+  public @Nonnull String getName() {
+    return NAME;
+  }
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void toDataURL(@Nullable Double tag, @Nullable ReadableMap options, @Nullable Callback callback);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/CMakeLists.txt b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/CMakeLists.txt
new file mode 100644
index 0000000..0e77cf9
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/CMakeLists.txt
@@ -0,0 +1,36 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+file(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/rnsvg/*.cpp)
+
+add_library(
+  react_codegen_rnsvg
+  OBJECT
+  ${react_codegen_SRCS}
+)
+
+target_include_directories(react_codegen_rnsvg PUBLIC . react/renderer/components/rnsvg)
+
+target_link_libraries(
+  react_codegen_rnsvg
+  fbjni
+  jsi
+  # We need to link different libraries based on whether we are building rncore or not, that's necessary
+  # because we want to break a circular dependency between react_codegen_rncore and reactnative
+  reactnative
+)
+
+target_compile_options(
+  react_codegen_rnsvg
+  PRIVATE
+  -DLOG_TAG=\"ReactNative\"
+  -fexceptions
+  -frtti
+  -std=c++20
+  -Wall
+)
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.cpp
new file mode 100644
index 0000000..23bde21
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.cpp
@@ -0,0 +1,23 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorCpp.js
+ */
+
+#include <react/renderer/components/rnsvg/ComponentDescriptors.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
+
+namespace facebook::react {
+
+void rnsvg_registerComponentDescriptorsFromCodegen(
+  std::shared_ptr<const ComponentDescriptorProviderRegistry> registry) {
+registry->add(concreteComponentDescriptorProvider<RNSVGSvgViewAndroidComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGSvgViewComponentDescriptor>());
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.h
new file mode 100644
index 0000000..6859613
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.h
@@ -0,0 +1,25 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/rnsvg/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
+
+namespace facebook::react {
+
+using RNSVGSvgViewAndroidComponentDescriptor = ConcreteComponentDescriptor<RNSVGSvgViewAndroidShadowNode>;
+using RNSVGSvgViewComponentDescriptor = ConcreteComponentDescriptor<RNSVGSvgViewShadowNode>;
+
+void rnsvg_registerComponentDescriptorsFromCodegen(
+  std::shared_ptr<const ComponentDescriptorProviderRegistry> registry);
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.cpp
new file mode 100644
index 0000000..92328f5
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.cpp
@@ -0,0 +1,59 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/rnsvg/EventEmitters.h>
+
+
+namespace facebook::react {
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+void RNSVGImageEventEmitter::onLoad(OnLoad $event) const {
+  dispatchEvent("load", [$event=std::move($event)](jsi::Runtime &runtime) {
+    auto $payload = jsi::Object(runtime);
+    {
+  auto source = jsi::Object(runtime);
+  source.setProperty(runtime, "width", $event.source.width);
+  source.setProperty(runtime, "height", $event.source.height);
+  source.setProperty(runtime, "uri", $event.source.uri);
+  $payload.setProperty(runtime, "source", source);
+}
+    return $payload;
+  });
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.h
new file mode 100644
index 0000000..50d9283
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.h
@@ -0,0 +1,234 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+
+namespace facebook::react {
+class RNSVGSvgViewAndroidEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGCircleEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGClipPathEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGDefsEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGEllipseEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGFeBlendEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGFeColorMatrixEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGFeCompositeEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGFeFloodEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGFeGaussianBlurEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGFeMergeEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGFeOffsetEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGFilterEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGForeignObjectEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGGroupEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGImageEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  struct OnLoadSource {
+      Float width;
+    Float height;
+    std::string uri;
+    };
+
+  struct OnLoad {
+      OnLoadSource source;
+    };
+  void onLoad(OnLoad value) const;
+};
+class RNSVGSvgViewEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGLinearGradientEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGLineEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGMarkerEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGMaskEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGPathEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGPatternEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGRadialGradientEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGRectEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGSymbolEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGTextEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGTextPathEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGTSpanEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGUseEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.cpp
new file mode 100644
index 0000000..836ef81
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.cpp
@@ -0,0 +1,977 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/rnsvg/Props.h>
+#include <folly/dynamic.h>
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook::react {
+
+RNSVGSvgViewAndroidProps::RNSVGSvgViewAndroidProps(
+    const PropsParserContext &context,
+    const RNSVGSvgViewAndroidProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    bbWidth(convertRawProp(context, rawProps, "bbWidth", sourceProps.bbWidth, {})),
+    bbHeight(convertRawProp(context, rawProps, "bbHeight", sourceProps.bbHeight, {})),
+    minX(convertRawProp(context, rawProps, "minX", sourceProps.minX, {0.0})),
+    minY(convertRawProp(context, rawProps, "minY", sourceProps.minY, {0.0})),
+    vbWidth(convertRawProp(context, rawProps, "vbWidth", sourceProps.vbWidth, {0.0})),
+    vbHeight(convertRawProp(context, rawProps, "vbHeight", sourceProps.vbHeight, {0.0})),
+    align(convertRawProp(context, rawProps, "align", sourceProps.align, {})),
+    meetOrSlice(convertRawProp(context, rawProps, "meetOrSlice", sourceProps.meetOrSlice, {0})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    hasTVPreferredFocus(convertRawProp(context, rawProps, "hasTVPreferredFocus", sourceProps.hasTVPreferredFocus, {false})),
+    borderBottomColor(convertRawProp(context, rawProps, "borderBottomColor", sourceProps.borderBottomColor, {})),
+    nextFocusDown(convertRawProp(context, rawProps, "nextFocusDown", sourceProps.nextFocusDown, {0})),
+    borderRightColor(convertRawProp(context, rawProps, "borderRightColor", sourceProps.borderRightColor, {})),
+    nextFocusRight(convertRawProp(context, rawProps, "nextFocusRight", sourceProps.nextFocusRight, {0})),
+    borderLeftColor(convertRawProp(context, rawProps, "borderLeftColor", sourceProps.borderLeftColor, {})),
+    borderColor(convertRawProp(context, rawProps, "borderColor", sourceProps.borderColor, {})),
+    removeClippedSubviews(convertRawProp(context, rawProps, "removeClippedSubviews", sourceProps.removeClippedSubviews, {false})),
+    nextFocusForward(convertRawProp(context, rawProps, "nextFocusForward", sourceProps.nextFocusForward, {0})),
+    nextFocusUp(convertRawProp(context, rawProps, "nextFocusUp", sourceProps.nextFocusUp, {0})),
+    accessible(convertRawProp(context, rawProps, "accessible", sourceProps.accessible, {false})),
+    borderStartColor(convertRawProp(context, rawProps, "borderStartColor", sourceProps.borderStartColor, {})),
+    borderEndColor(convertRawProp(context, rawProps, "borderEndColor", sourceProps.borderEndColor, {})),
+    focusable(convertRawProp(context, rawProps, "focusable", sourceProps.focusable, {false})),
+    nativeBackgroundAndroid(convertRawProp(context, rawProps, "nativeBackgroundAndroid", sourceProps.nativeBackgroundAndroid, {})),
+    nativeForegroundAndroid(convertRawProp(context, rawProps, "nativeForegroundAndroid", sourceProps.nativeForegroundAndroid, {})),
+    backfaceVisibility(convertRawProp(context, rawProps, "backfaceVisibility", sourceProps.backfaceVisibility, {})),
+    borderStyle(convertRawProp(context, rawProps, "borderStyle", sourceProps.borderStyle, {})),
+    needsOffscreenAlphaCompositing(convertRawProp(context, rawProps, "needsOffscreenAlphaCompositing", sourceProps.needsOffscreenAlphaCompositing, {false})),
+    hitSlop(convertRawProp(context, rawProps, "hitSlop", sourceProps.hitSlop, {})),
+    borderTopColor(convertRawProp(context, rawProps, "borderTopColor", sourceProps.borderTopColor, {})),
+    nextFocusLeft(convertRawProp(context, rawProps, "nextFocusLeft", sourceProps.nextFocusLeft, {0})),
+    borderBlockColor(convertRawProp(context, rawProps, "borderBlockColor", sourceProps.borderBlockColor, {})),
+    borderBlockEndColor(convertRawProp(context, rawProps, "borderBlockEndColor", sourceProps.borderBlockEndColor, {})),
+    borderBlockStartColor(convertRawProp(context, rawProps, "borderBlockStartColor", sourceProps.borderBlockStartColor, {})),
+    borderRadius(convertRawProp(context, rawProps, "borderRadius", sourceProps.borderRadius, {})),
+    borderTopLeftRadius(convertRawProp(context, rawProps, "borderTopLeftRadius", sourceProps.borderTopLeftRadius, {})),
+    borderTopRightRadius(convertRawProp(context, rawProps, "borderTopRightRadius", sourceProps.borderTopRightRadius, {})),
+    borderBottomRightRadius(convertRawProp(context, rawProps, "borderBottomRightRadius", sourceProps.borderBottomRightRadius, {})),
+    borderBottomLeftRadius(convertRawProp(context, rawProps, "borderBottomLeftRadius", sourceProps.borderBottomLeftRadius, {})),
+    borderTopStartRadius(convertRawProp(context, rawProps, "borderTopStartRadius", sourceProps.borderTopStartRadius, {})),
+    borderTopEndRadius(convertRawProp(context, rawProps, "borderTopEndRadius", sourceProps.borderTopEndRadius, {})),
+    borderBottomStartRadius(convertRawProp(context, rawProps, "borderBottomStartRadius", sourceProps.borderBottomStartRadius, {})),
+    borderBottomEndRadius(convertRawProp(context, rawProps, "borderBottomEndRadius", sourceProps.borderBottomEndRadius, {})),
+    borderEndEndRadius(convertRawProp(context, rawProps, "borderEndEndRadius", sourceProps.borderEndEndRadius, {})),
+    borderEndStartRadius(convertRawProp(context, rawProps, "borderEndStartRadius", sourceProps.borderEndStartRadius, {})),
+    borderStartEndRadius(convertRawProp(context, rawProps, "borderStartEndRadius", sourceProps.borderStartEndRadius, {})),
+    borderStartStartRadius(convertRawProp(context, rawProps, "borderStartStartRadius", sourceProps.borderStartStartRadius, {}))
+      {}
+RNSVGCircleProps::RNSVGCircleProps(
+    const PropsParserContext &context,
+    const RNSVGCircleProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    cx(convertRawProp(context, rawProps, "cx", sourceProps.cx, {})),
+    cy(convertRawProp(context, rawProps, "cy", sourceProps.cy, {})),
+    r(convertRawProp(context, rawProps, "r", sourceProps.r, {}))
+      {}
+RNSVGClipPathProps::RNSVGClipPathProps(
+    const PropsParserContext &context,
+    const RNSVGClipPathProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {}))
+      {}
+RNSVGDefsProps::RNSVGDefsProps(
+    const PropsParserContext &context,
+    const RNSVGDefsProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {}))
+      {}
+RNSVGEllipseProps::RNSVGEllipseProps(
+    const PropsParserContext &context,
+    const RNSVGEllipseProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    cx(convertRawProp(context, rawProps, "cx", sourceProps.cx, {})),
+    cy(convertRawProp(context, rawProps, "cy", sourceProps.cy, {})),
+    rx(convertRawProp(context, rawProps, "rx", sourceProps.rx, {})),
+    ry(convertRawProp(context, rawProps, "ry", sourceProps.ry, {}))
+      {}
+RNSVGFeBlendProps::RNSVGFeBlendProps(
+    const PropsParserContext &context,
+    const RNSVGFeBlendProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    result(convertRawProp(context, rawProps, "result", sourceProps.result, {})),
+    in1(convertRawProp(context, rawProps, "in1", sourceProps.in1, {})),
+    in2(convertRawProp(context, rawProps, "in2", sourceProps.in2, {})),
+    mode(convertRawProp(context, rawProps, "mode", sourceProps.mode, {RNSVGFeBlendMode::Normal}))
+      {}
+RNSVGFeColorMatrixProps::RNSVGFeColorMatrixProps(
+    const PropsParserContext &context,
+    const RNSVGFeColorMatrixProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    result(convertRawProp(context, rawProps, "result", sourceProps.result, {})),
+    in1(convertRawProp(context, rawProps, "in1", sourceProps.in1, {})),
+    type(convertRawProp(context, rawProps, "type", sourceProps.type, {RNSVGFeColorMatrixType::Matrix})),
+    values(convertRawProp(context, rawProps, "values", sourceProps.values, {}))
+      {}
+RNSVGFeCompositeProps::RNSVGFeCompositeProps(
+    const PropsParserContext &context,
+    const RNSVGFeCompositeProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    result(convertRawProp(context, rawProps, "result", sourceProps.result, {})),
+    in1(convertRawProp(context, rawProps, "in1", sourceProps.in1, {})),
+    in2(convertRawProp(context, rawProps, "in2", sourceProps.in2, {})),
+    operator1(convertRawProp(context, rawProps, "operator1", sourceProps.operator1, {RNSVGFeCompositeOperator1::Over})),
+    k1(convertRawProp(context, rawProps, "k1", sourceProps.k1, {0.0})),
+    k2(convertRawProp(context, rawProps, "k2", sourceProps.k2, {0.0})),
+    k3(convertRawProp(context, rawProps, "k3", sourceProps.k3, {0.0})),
+    k4(convertRawProp(context, rawProps, "k4", sourceProps.k4, {0.0}))
+      {}
+RNSVGFeFloodProps::RNSVGFeFloodProps(
+    const PropsParserContext &context,
+    const RNSVGFeFloodProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    result(convertRawProp(context, rawProps, "result", sourceProps.result, {})),
+    floodColor(convertRawProp(context, rawProps, "floodColor", sourceProps.floodColor, {})),
+    floodOpacity(convertRawProp(context, rawProps, "floodOpacity", sourceProps.floodOpacity, {1.0}))
+      {}
+RNSVGFeGaussianBlurProps::RNSVGFeGaussianBlurProps(
+    const PropsParserContext &context,
+    const RNSVGFeGaussianBlurProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    result(convertRawProp(context, rawProps, "result", sourceProps.result, {})),
+    in1(convertRawProp(context, rawProps, "in1", sourceProps.in1, {})),
+    stdDeviationX(convertRawProp(context, rawProps, "stdDeviationX", sourceProps.stdDeviationX, {0.0})),
+    stdDeviationY(convertRawProp(context, rawProps, "stdDeviationY", sourceProps.stdDeviationY, {0.0})),
+    edgeMode(convertRawProp(context, rawProps, "edgeMode", sourceProps.edgeMode, {RNSVGFeGaussianBlurEdgeMode::None}))
+      {}
+RNSVGFeMergeProps::RNSVGFeMergeProps(
+    const PropsParserContext &context,
+    const RNSVGFeMergeProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    result(convertRawProp(context, rawProps, "result", sourceProps.result, {})),
+    nodes(convertRawProp(context, rawProps, "nodes", sourceProps.nodes, {}))
+      {}
+RNSVGFeOffsetProps::RNSVGFeOffsetProps(
+    const PropsParserContext &context,
+    const RNSVGFeOffsetProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    result(convertRawProp(context, rawProps, "result", sourceProps.result, {})),
+    in1(convertRawProp(context, rawProps, "in1", sourceProps.in1, {})),
+    dx(convertRawProp(context, rawProps, "dx", sourceProps.dx, {})),
+    dy(convertRawProp(context, rawProps, "dy", sourceProps.dy, {}))
+      {}
+RNSVGFilterProps::RNSVGFilterProps(
+    const PropsParserContext &context,
+    const RNSVGFilterProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    filterUnits(convertRawProp(context, rawProps, "filterUnits", sourceProps.filterUnits, {RNSVGFilterFilterUnits::ObjectBoundingBox})),
+    primitiveUnits(convertRawProp(context, rawProps, "primitiveUnits", sourceProps.primitiveUnits, {RNSVGFilterPrimitiveUnits::UserSpaceOnUse}))
+      {}
+RNSVGForeignObjectProps::RNSVGForeignObjectProps(
+    const PropsParserContext &context,
+    const RNSVGForeignObjectProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {}))
+      {}
+RNSVGGroupProps::RNSVGGroupProps(
+    const PropsParserContext &context,
+    const RNSVGGroupProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {}))
+      {}
+RNSVGImageProps::RNSVGImageProps(
+    const PropsParserContext &context,
+    const RNSVGImageProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    src(convertRawProp(context, rawProps, "src", sourceProps.src, {})),
+    align(convertRawProp(context, rawProps, "align", sourceProps.align, {})),
+    meetOrSlice(convertRawProp(context, rawProps, "meetOrSlice", sourceProps.meetOrSlice, {0}))
+      {}
+RNSVGSvgViewProps::RNSVGSvgViewProps(
+    const PropsParserContext &context,
+    const RNSVGSvgViewProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    bbWidth(convertRawProp(context, rawProps, "bbWidth", sourceProps.bbWidth, {})),
+    bbHeight(convertRawProp(context, rawProps, "bbHeight", sourceProps.bbHeight, {})),
+    minX(convertRawProp(context, rawProps, "minX", sourceProps.minX, {0.0})),
+    minY(convertRawProp(context, rawProps, "minY", sourceProps.minY, {0.0})),
+    vbWidth(convertRawProp(context, rawProps, "vbWidth", sourceProps.vbWidth, {0.0})),
+    vbHeight(convertRawProp(context, rawProps, "vbHeight", sourceProps.vbHeight, {0.0})),
+    align(convertRawProp(context, rawProps, "align", sourceProps.align, {})),
+    meetOrSlice(convertRawProp(context, rawProps, "meetOrSlice", sourceProps.meetOrSlice, {0})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    hitSlop(convertRawProp(context, rawProps, "hitSlop", sourceProps.hitSlop, {}))
+      {}
+RNSVGLinearGradientProps::RNSVGLinearGradientProps(
+    const PropsParserContext &context,
+    const RNSVGLinearGradientProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    x1(convertRawProp(context, rawProps, "x1", sourceProps.x1, {})),
+    y1(convertRawProp(context, rawProps, "y1", sourceProps.y1, {})),
+    x2(convertRawProp(context, rawProps, "x2", sourceProps.x2, {})),
+    y2(convertRawProp(context, rawProps, "y2", sourceProps.y2, {})),
+    gradient(convertRawProp(context, rawProps, "gradient", sourceProps.gradient, {})),
+    gradientUnits(convertRawProp(context, rawProps, "gradientUnits", sourceProps.gradientUnits, {0})),
+    gradientTransform(convertRawProp(context, rawProps, "gradientTransform", sourceProps.gradientTransform, {}))
+      {}
+RNSVGLineProps::RNSVGLineProps(
+    const PropsParserContext &context,
+    const RNSVGLineProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    x1(convertRawProp(context, rawProps, "x1", sourceProps.x1, {})),
+    y1(convertRawProp(context, rawProps, "y1", sourceProps.y1, {})),
+    x2(convertRawProp(context, rawProps, "x2", sourceProps.x2, {})),
+    y2(convertRawProp(context, rawProps, "y2", sourceProps.y2, {}))
+      {}
+RNSVGMarkerProps::RNSVGMarkerProps(
+    const PropsParserContext &context,
+    const RNSVGMarkerProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    refX(convertRawProp(context, rawProps, "refX", sourceProps.refX, {})),
+    refY(convertRawProp(context, rawProps, "refY", sourceProps.refY, {})),
+    markerHeight(convertRawProp(context, rawProps, "markerHeight", sourceProps.markerHeight, {})),
+    markerWidth(convertRawProp(context, rawProps, "markerWidth", sourceProps.markerWidth, {})),
+    markerUnits(convertRawProp(context, rawProps, "markerUnits", sourceProps.markerUnits, {})),
+    orient(convertRawProp(context, rawProps, "orient", sourceProps.orient, {})),
+    minX(convertRawProp(context, rawProps, "minX", sourceProps.minX, {0.0})),
+    minY(convertRawProp(context, rawProps, "minY", sourceProps.minY, {0.0})),
+    vbWidth(convertRawProp(context, rawProps, "vbWidth", sourceProps.vbWidth, {0.0})),
+    vbHeight(convertRawProp(context, rawProps, "vbHeight", sourceProps.vbHeight, {0.0})),
+    align(convertRawProp(context, rawProps, "align", sourceProps.align, {})),
+    meetOrSlice(convertRawProp(context, rawProps, "meetOrSlice", sourceProps.meetOrSlice, {0}))
+      {}
+RNSVGMaskProps::RNSVGMaskProps(
+    const PropsParserContext &context,
+    const RNSVGMaskProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    maskUnits(convertRawProp(context, rawProps, "maskUnits", sourceProps.maskUnits, {0})),
+    maskContentUnits(convertRawProp(context, rawProps, "maskContentUnits", sourceProps.maskContentUnits, {0})),
+    maskType(convertRawProp(context, rawProps, "maskType", sourceProps.maskType, {0}))
+      {}
+RNSVGPathProps::RNSVGPathProps(
+    const PropsParserContext &context,
+    const RNSVGPathProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    d(convertRawProp(context, rawProps, "d", sourceProps.d, {}))
+      {}
+RNSVGPatternProps::RNSVGPatternProps(
+    const PropsParserContext &context,
+    const RNSVGPatternProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    patternUnits(convertRawProp(context, rawProps, "patternUnits", sourceProps.patternUnits, {0})),
+    patternContentUnits(convertRawProp(context, rawProps, "patternContentUnits", sourceProps.patternContentUnits, {0})),
+    patternTransform(convertRawProp(context, rawProps, "patternTransform", sourceProps.patternTransform, {})),
+    minX(convertRawProp(context, rawProps, "minX", sourceProps.minX, {0.0})),
+    minY(convertRawProp(context, rawProps, "minY", sourceProps.minY, {0.0})),
+    vbWidth(convertRawProp(context, rawProps, "vbWidth", sourceProps.vbWidth, {0.0})),
+    vbHeight(convertRawProp(context, rawProps, "vbHeight", sourceProps.vbHeight, {0.0})),
+    align(convertRawProp(context, rawProps, "align", sourceProps.align, {})),
+    meetOrSlice(convertRawProp(context, rawProps, "meetOrSlice", sourceProps.meetOrSlice, {0}))
+      {}
+RNSVGRadialGradientProps::RNSVGRadialGradientProps(
+    const PropsParserContext &context,
+    const RNSVGRadialGradientProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fx(convertRawProp(context, rawProps, "fx", sourceProps.fx, {})),
+    fy(convertRawProp(context, rawProps, "fy", sourceProps.fy, {})),
+    cx(convertRawProp(context, rawProps, "cx", sourceProps.cx, {})),
+    cy(convertRawProp(context, rawProps, "cy", sourceProps.cy, {})),
+    rx(convertRawProp(context, rawProps, "rx", sourceProps.rx, {})),
+    ry(convertRawProp(context, rawProps, "ry", sourceProps.ry, {})),
+    gradient(convertRawProp(context, rawProps, "gradient", sourceProps.gradient, {})),
+    gradientUnits(convertRawProp(context, rawProps, "gradientUnits", sourceProps.gradientUnits, {0})),
+    gradientTransform(convertRawProp(context, rawProps, "gradientTransform", sourceProps.gradientTransform, {}))
+      {}
+RNSVGRectProps::RNSVGRectProps(
+    const PropsParserContext &context,
+    const RNSVGRectProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    rx(convertRawProp(context, rawProps, "rx", sourceProps.rx, {})),
+    ry(convertRawProp(context, rawProps, "ry", sourceProps.ry, {}))
+      {}
+RNSVGSymbolProps::RNSVGSymbolProps(
+    const PropsParserContext &context,
+    const RNSVGSymbolProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    minX(convertRawProp(context, rawProps, "minX", sourceProps.minX, {0.0})),
+    minY(convertRawProp(context, rawProps, "minY", sourceProps.minY, {0.0})),
+    vbWidth(convertRawProp(context, rawProps, "vbWidth", sourceProps.vbWidth, {0.0})),
+    vbHeight(convertRawProp(context, rawProps, "vbHeight", sourceProps.vbHeight, {0.0})),
+    align(convertRawProp(context, rawProps, "align", sourceProps.align, {})),
+    meetOrSlice(convertRawProp(context, rawProps, "meetOrSlice", sourceProps.meetOrSlice, {0}))
+      {}
+RNSVGTextProps::RNSVGTextProps(
+    const PropsParserContext &context,
+    const RNSVGTextProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    dx(convertRawProp(context, rawProps, "dx", sourceProps.dx, {})),
+    dy(convertRawProp(context, rawProps, "dy", sourceProps.dy, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    rotate(convertRawProp(context, rawProps, "rotate", sourceProps.rotate, {})),
+    inlineSize(convertRawProp(context, rawProps, "inlineSize", sourceProps.inlineSize, {})),
+    textLength(convertRawProp(context, rawProps, "textLength", sourceProps.textLength, {})),
+    baselineShift(convertRawProp(context, rawProps, "baselineShift", sourceProps.baselineShift, {})),
+    lengthAdjust(convertRawProp(context, rawProps, "lengthAdjust", sourceProps.lengthAdjust, {})),
+    alignmentBaseline(convertRawProp(context, rawProps, "alignmentBaseline", sourceProps.alignmentBaseline, {})),
+    verticalAlign(convertRawProp(context, rawProps, "verticalAlign", sourceProps.verticalAlign, {}))
+      {}
+RNSVGTextPathProps::RNSVGTextPathProps(
+    const PropsParserContext &context,
+    const RNSVGTextPathProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    dx(convertRawProp(context, rawProps, "dx", sourceProps.dx, {})),
+    dy(convertRawProp(context, rawProps, "dy", sourceProps.dy, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    rotate(convertRawProp(context, rawProps, "rotate", sourceProps.rotate, {})),
+    inlineSize(convertRawProp(context, rawProps, "inlineSize", sourceProps.inlineSize, {})),
+    textLength(convertRawProp(context, rawProps, "textLength", sourceProps.textLength, {})),
+    baselineShift(convertRawProp(context, rawProps, "baselineShift", sourceProps.baselineShift, {})),
+    lengthAdjust(convertRawProp(context, rawProps, "lengthAdjust", sourceProps.lengthAdjust, {})),
+    alignmentBaseline(convertRawProp(context, rawProps, "alignmentBaseline", sourceProps.alignmentBaseline, {})),
+    verticalAlign(convertRawProp(context, rawProps, "verticalAlign", sourceProps.verticalAlign, {})),
+    href(convertRawProp(context, rawProps, "href", sourceProps.href, {})),
+    side(convertRawProp(context, rawProps, "side", sourceProps.side, {})),
+    method(convertRawProp(context, rawProps, "method", sourceProps.method, {})),
+    midLine(convertRawProp(context, rawProps, "midLine", sourceProps.midLine, {})),
+    spacing(convertRawProp(context, rawProps, "spacing", sourceProps.spacing, {})),
+    startOffset(convertRawProp(context, rawProps, "startOffset", sourceProps.startOffset, {}))
+      {}
+RNSVGTSpanProps::RNSVGTSpanProps(
+    const PropsParserContext &context,
+    const RNSVGTSpanProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    dx(convertRawProp(context, rawProps, "dx", sourceProps.dx, {})),
+    dy(convertRawProp(context, rawProps, "dy", sourceProps.dy, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    rotate(convertRawProp(context, rawProps, "rotate", sourceProps.rotate, {})),
+    inlineSize(convertRawProp(context, rawProps, "inlineSize", sourceProps.inlineSize, {})),
+    textLength(convertRawProp(context, rawProps, "textLength", sourceProps.textLength, {})),
+    baselineShift(convertRawProp(context, rawProps, "baselineShift", sourceProps.baselineShift, {})),
+    lengthAdjust(convertRawProp(context, rawProps, "lengthAdjust", sourceProps.lengthAdjust, {})),
+    alignmentBaseline(convertRawProp(context, rawProps, "alignmentBaseline", sourceProps.alignmentBaseline, {})),
+    verticalAlign(convertRawProp(context, rawProps, "verticalAlign", sourceProps.verticalAlign, {})),
+    content(convertRawProp(context, rawProps, "content", sourceProps.content, {}))
+      {}
+RNSVGUseProps::RNSVGUseProps(
+    const PropsParserContext &context,
+    const RNSVGUseProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
+    href(convertRawProp(context, rawProps, "href", sourceProps.href, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {}))
+      {}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.h
new file mode 100644
index 0000000..8882122
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.h
@@ -0,0 +1,1248 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+#include <react/renderer/graphics/Color.h>
+#include <react/renderer/imagemanager/primitives.h>
+#include <vector>
+
+namespace facebook::react {
+
+struct RNSVGSvgViewAndroidNativeBackgroundAndroidStruct {
+  std::string type{};
+  Float color{0.0};
+  bool borderless{false};
+  Float rippleRadius{0.0};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGSvgViewAndroidNativeBackgroundAndroidStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_color = map.find("color");
+  if (tmp_color != map.end()) {
+    fromRawValue(context, tmp_color->second, result.color);
+  }
+  auto tmp_borderless = map.find("borderless");
+  if (tmp_borderless != map.end()) {
+    fromRawValue(context, tmp_borderless->second, result.borderless);
+  }
+  auto tmp_rippleRadius = map.find("rippleRadius");
+  if (tmp_rippleRadius != map.end()) {
+    fromRawValue(context, tmp_rippleRadius->second, result.rippleRadius);
+  }
+}
+
+static inline std::string toString(const RNSVGSvgViewAndroidNativeBackgroundAndroidStruct &value) {
+  return "[Object RNSVGSvgViewAndroidNativeBackgroundAndroidStruct]";
+}
+
+struct RNSVGSvgViewAndroidNativeForegroundAndroidStruct {
+  std::string type{};
+  Float color{0.0};
+  bool borderless{false};
+  Float rippleRadius{0.0};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGSvgViewAndroidNativeForegroundAndroidStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_color = map.find("color");
+  if (tmp_color != map.end()) {
+    fromRawValue(context, tmp_color->second, result.color);
+  }
+  auto tmp_borderless = map.find("borderless");
+  if (tmp_borderless != map.end()) {
+    fromRawValue(context, tmp_borderless->second, result.borderless);
+  }
+  auto tmp_rippleRadius = map.find("rippleRadius");
+  if (tmp_rippleRadius != map.end()) {
+    fromRawValue(context, tmp_rippleRadius->second, result.rippleRadius);
+  }
+}
+
+static inline std::string toString(const RNSVGSvgViewAndroidNativeForegroundAndroidStruct &value) {
+  return "[Object RNSVGSvgViewAndroidNativeForegroundAndroidStruct]";
+}
+class RNSVGSvgViewAndroidProps final : public ViewProps {
+ public:
+  RNSVGSvgViewAndroidProps() = default;
+  RNSVGSvgViewAndroidProps(const PropsParserContext& context, const RNSVGSvgViewAndroidProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  folly::dynamic bbWidth{};
+  folly::dynamic bbHeight{};
+  Float minX{0.0};
+  Float minY{0.0};
+  Float vbWidth{0.0};
+  Float vbHeight{0.0};
+  std::string align{};
+  int meetOrSlice{0};
+  SharedColor color{};
+  std::string pointerEvents{};
+  bool hasTVPreferredFocus{false};
+  SharedColor borderBottomColor{};
+  int nextFocusDown{0};
+  SharedColor borderRightColor{};
+  int nextFocusRight{0};
+  SharedColor borderLeftColor{};
+  SharedColor borderColor{};
+  bool removeClippedSubviews{false};
+  int nextFocusForward{0};
+  int nextFocusUp{0};
+  bool accessible{false};
+  SharedColor borderStartColor{};
+  SharedColor borderEndColor{};
+  bool focusable{false};
+  RNSVGSvgViewAndroidNativeBackgroundAndroidStruct nativeBackgroundAndroid{};
+  RNSVGSvgViewAndroidNativeForegroundAndroidStruct nativeForegroundAndroid{};
+  std::string backfaceVisibility{};
+  std::string borderStyle{};
+  bool needsOffscreenAlphaCompositing{false};
+  folly::dynamic hitSlop{};
+  SharedColor borderTopColor{};
+  int nextFocusLeft{0};
+  SharedColor borderBlockColor{};
+  SharedColor borderBlockEndColor{};
+  SharedColor borderBlockStartColor{};
+  folly::dynamic borderRadius{};
+  folly::dynamic borderTopLeftRadius{};
+  folly::dynamic borderTopRightRadius{};
+  folly::dynamic borderBottomRightRadius{};
+  folly::dynamic borderBottomLeftRadius{};
+  folly::dynamic borderTopStartRadius{};
+  folly::dynamic borderTopEndRadius{};
+  folly::dynamic borderBottomStartRadius{};
+  folly::dynamic borderBottomEndRadius{};
+  folly::dynamic borderEndEndRadius{};
+  folly::dynamic borderEndStartRadius{};
+  folly::dynamic borderStartEndRadius{};
+  folly::dynamic borderStartStartRadius{};
+};
+
+class RNSVGCircleProps final : public ViewProps {
+ public:
+  RNSVGCircleProps() = default;
+  RNSVGCircleProps(const PropsParserContext& context, const RNSVGCircleProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic cx{};
+  folly::dynamic cy{};
+  folly::dynamic r{};
+};
+
+class RNSVGClipPathProps final : public ViewProps {
+ public:
+  RNSVGClipPathProps() = default;
+  RNSVGClipPathProps(const PropsParserContext& context, const RNSVGClipPathProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic fontSize{};
+  folly::dynamic fontWeight{};
+  folly::dynamic font{};
+};
+
+class RNSVGDefsProps final : public ViewProps {
+ public:
+  RNSVGDefsProps() = default;
+  RNSVGDefsProps(const PropsParserContext& context, const RNSVGDefsProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+};
+
+class RNSVGEllipseProps final : public ViewProps {
+ public:
+  RNSVGEllipseProps() = default;
+  RNSVGEllipseProps(const PropsParserContext& context, const RNSVGEllipseProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic cx{};
+  folly::dynamic cy{};
+  folly::dynamic rx{};
+  folly::dynamic ry{};
+};
+
+enum class RNSVGFeBlendMode { Unknown, Normal, Multiply, Screen, Darken, Lighten };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGFeBlendMode &result) {
+  auto string = (std::string)value;
+  if (string == "unknown") { result = RNSVGFeBlendMode::Unknown; return; }
+  if (string == "normal") { result = RNSVGFeBlendMode::Normal; return; }
+  if (string == "multiply") { result = RNSVGFeBlendMode::Multiply; return; }
+  if (string == "screen") { result = RNSVGFeBlendMode::Screen; return; }
+  if (string == "darken") { result = RNSVGFeBlendMode::Darken; return; }
+  if (string == "lighten") { result = RNSVGFeBlendMode::Lighten; return; }
+  abort();
+}
+
+static inline std::string toString(const RNSVGFeBlendMode &value) {
+  switch (value) {
+    case RNSVGFeBlendMode::Unknown: return "unknown";
+    case RNSVGFeBlendMode::Normal: return "normal";
+    case RNSVGFeBlendMode::Multiply: return "multiply";
+    case RNSVGFeBlendMode::Screen: return "screen";
+    case RNSVGFeBlendMode::Darken: return "darken";
+    case RNSVGFeBlendMode::Lighten: return "lighten";
+  }
+}
+
+class RNSVGFeBlendProps final : public ViewProps {
+ public:
+  RNSVGFeBlendProps() = default;
+  RNSVGFeBlendProps(const PropsParserContext& context, const RNSVGFeBlendProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic width{};
+  folly::dynamic height{};
+  std::string result{};
+  std::string in1{};
+  std::string in2{};
+  RNSVGFeBlendMode mode{RNSVGFeBlendMode::Normal};
+};
+
+enum class RNSVGFeColorMatrixType { Matrix, Saturate, HueRotate, LuminanceToAlpha };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGFeColorMatrixType &result) {
+  auto string = (std::string)value;
+  if (string == "matrix") { result = RNSVGFeColorMatrixType::Matrix; return; }
+  if (string == "saturate") { result = RNSVGFeColorMatrixType::Saturate; return; }
+  if (string == "hueRotate") { result = RNSVGFeColorMatrixType::HueRotate; return; }
+  if (string == "luminanceToAlpha") { result = RNSVGFeColorMatrixType::LuminanceToAlpha; return; }
+  abort();
+}
+
+static inline std::string toString(const RNSVGFeColorMatrixType &value) {
+  switch (value) {
+    case RNSVGFeColorMatrixType::Matrix: return "matrix";
+    case RNSVGFeColorMatrixType::Saturate: return "saturate";
+    case RNSVGFeColorMatrixType::HueRotate: return "hueRotate";
+    case RNSVGFeColorMatrixType::LuminanceToAlpha: return "luminanceToAlpha";
+  }
+}
+
+class RNSVGFeColorMatrixProps final : public ViewProps {
+ public:
+  RNSVGFeColorMatrixProps() = default;
+  RNSVGFeColorMatrixProps(const PropsParserContext& context, const RNSVGFeColorMatrixProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic width{};
+  folly::dynamic height{};
+  std::string result{};
+  std::string in1{};
+  RNSVGFeColorMatrixType type{RNSVGFeColorMatrixType::Matrix};
+  std::vector<Float> values{};
+};
+
+enum class RNSVGFeCompositeOperator1 { Over, In, Out, Atop, Xor, Arithmetic };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGFeCompositeOperator1 &result) {
+  auto string = (std::string)value;
+  if (string == "over") { result = RNSVGFeCompositeOperator1::Over; return; }
+  if (string == "in") { result = RNSVGFeCompositeOperator1::In; return; }
+  if (string == "out") { result = RNSVGFeCompositeOperator1::Out; return; }
+  if (string == "atop") { result = RNSVGFeCompositeOperator1::Atop; return; }
+  if (string == "xor") { result = RNSVGFeCompositeOperator1::Xor; return; }
+  if (string == "arithmetic") { result = RNSVGFeCompositeOperator1::Arithmetic; return; }
+  abort();
+}
+
+static inline std::string toString(const RNSVGFeCompositeOperator1 &value) {
+  switch (value) {
+    case RNSVGFeCompositeOperator1::Over: return "over";
+    case RNSVGFeCompositeOperator1::In: return "in";
+    case RNSVGFeCompositeOperator1::Out: return "out";
+    case RNSVGFeCompositeOperator1::Atop: return "atop";
+    case RNSVGFeCompositeOperator1::Xor: return "xor";
+    case RNSVGFeCompositeOperator1::Arithmetic: return "arithmetic";
+  }
+}
+
+class RNSVGFeCompositeProps final : public ViewProps {
+ public:
+  RNSVGFeCompositeProps() = default;
+  RNSVGFeCompositeProps(const PropsParserContext& context, const RNSVGFeCompositeProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic width{};
+  folly::dynamic height{};
+  std::string result{};
+  std::string in1{};
+  std::string in2{};
+  RNSVGFeCompositeOperator1 operator1{RNSVGFeCompositeOperator1::Over};
+  Float k1{0.0};
+  Float k2{0.0};
+  Float k3{0.0};
+  Float k4{0.0};
+};
+
+class RNSVGFeFloodProps final : public ViewProps {
+ public:
+  RNSVGFeFloodProps() = default;
+  RNSVGFeFloodProps(const PropsParserContext& context, const RNSVGFeFloodProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic width{};
+  folly::dynamic height{};
+  std::string result{};
+  folly::dynamic floodColor{};
+  Float floodOpacity{1.0};
+};
+
+enum class RNSVGFeGaussianBlurEdgeMode { Duplicate, Wrap, None };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGFeGaussianBlurEdgeMode &result) {
+  auto string = (std::string)value;
+  if (string == "duplicate") { result = RNSVGFeGaussianBlurEdgeMode::Duplicate; return; }
+  if (string == "wrap") { result = RNSVGFeGaussianBlurEdgeMode::Wrap; return; }
+  if (string == "none") { result = RNSVGFeGaussianBlurEdgeMode::None; return; }
+  abort();
+}
+
+static inline std::string toString(const RNSVGFeGaussianBlurEdgeMode &value) {
+  switch (value) {
+    case RNSVGFeGaussianBlurEdgeMode::Duplicate: return "duplicate";
+    case RNSVGFeGaussianBlurEdgeMode::Wrap: return "wrap";
+    case RNSVGFeGaussianBlurEdgeMode::None: return "none";
+  }
+}
+
+class RNSVGFeGaussianBlurProps final : public ViewProps {
+ public:
+  RNSVGFeGaussianBlurProps() = default;
+  RNSVGFeGaussianBlurProps(const PropsParserContext& context, const RNSVGFeGaussianBlurProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic width{};
+  folly::dynamic height{};
+  std::string result{};
+  std::string in1{};
+  Float stdDeviationX{0.0};
+  Float stdDeviationY{0.0};
+  RNSVGFeGaussianBlurEdgeMode edgeMode{RNSVGFeGaussianBlurEdgeMode::None};
+};
+
+class RNSVGFeMergeProps final : public ViewProps {
+ public:
+  RNSVGFeMergeProps() = default;
+  RNSVGFeMergeProps(const PropsParserContext& context, const RNSVGFeMergeProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic width{};
+  folly::dynamic height{};
+  std::string result{};
+  std::vector<std::string> nodes{};
+};
+
+class RNSVGFeOffsetProps final : public ViewProps {
+ public:
+  RNSVGFeOffsetProps() = default;
+  RNSVGFeOffsetProps(const PropsParserContext& context, const RNSVGFeOffsetProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic width{};
+  folly::dynamic height{};
+  std::string result{};
+  std::string in1{};
+  folly::dynamic dx{};
+  folly::dynamic dy{};
+};
+
+enum class RNSVGFilterFilterUnits { UserSpaceOnUse, ObjectBoundingBox };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGFilterFilterUnits &result) {
+  auto string = (std::string)value;
+  if (string == "userSpaceOnUse") { result = RNSVGFilterFilterUnits::UserSpaceOnUse; return; }
+  if (string == "objectBoundingBox") { result = RNSVGFilterFilterUnits::ObjectBoundingBox; return; }
+  abort();
+}
+
+static inline std::string toString(const RNSVGFilterFilterUnits &value) {
+  switch (value) {
+    case RNSVGFilterFilterUnits::UserSpaceOnUse: return "userSpaceOnUse";
+    case RNSVGFilterFilterUnits::ObjectBoundingBox: return "objectBoundingBox";
+  }
+}
+enum class RNSVGFilterPrimitiveUnits { UserSpaceOnUse, ObjectBoundingBox };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGFilterPrimitiveUnits &result) {
+  auto string = (std::string)value;
+  if (string == "userSpaceOnUse") { result = RNSVGFilterPrimitiveUnits::UserSpaceOnUse; return; }
+  if (string == "objectBoundingBox") { result = RNSVGFilterPrimitiveUnits::ObjectBoundingBox; return; }
+  abort();
+}
+
+static inline std::string toString(const RNSVGFilterPrimitiveUnits &value) {
+  switch (value) {
+    case RNSVGFilterPrimitiveUnits::UserSpaceOnUse: return "userSpaceOnUse";
+    case RNSVGFilterPrimitiveUnits::ObjectBoundingBox: return "objectBoundingBox";
+  }
+}
+
+class RNSVGFilterProps final : public ViewProps {
+ public:
+  RNSVGFilterProps() = default;
+  RNSVGFilterProps(const PropsParserContext& context, const RNSVGFilterProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic height{};
+  folly::dynamic width{};
+  RNSVGFilterFilterUnits filterUnits{RNSVGFilterFilterUnits::ObjectBoundingBox};
+  RNSVGFilterPrimitiveUnits primitiveUnits{RNSVGFilterPrimitiveUnits::UserSpaceOnUse};
+};
+
+class RNSVGForeignObjectProps final : public ViewProps {
+ public:
+  RNSVGForeignObjectProps() = default;
+  RNSVGForeignObjectProps(const PropsParserContext& context, const RNSVGForeignObjectProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic fontSize{};
+  folly::dynamic fontWeight{};
+  folly::dynamic font{};
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic height{};
+  folly::dynamic width{};
+};
+
+class RNSVGGroupProps final : public ViewProps {
+ public:
+  RNSVGGroupProps() = default;
+  RNSVGGroupProps(const PropsParserContext& context, const RNSVGGroupProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic fontSize{};
+  folly::dynamic fontWeight{};
+  folly::dynamic font{};
+};
+
+class RNSVGImageProps final : public ViewProps {
+ public:
+  RNSVGImageProps() = default;
+  RNSVGImageProps(const PropsParserContext& context, const RNSVGImageProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic width{};
+  folly::dynamic height{};
+  ImageSource src{};
+  std::string align{};
+  int meetOrSlice{0};
+};
+
+class RNSVGSvgViewProps final : public ViewProps {
+ public:
+  RNSVGSvgViewProps() = default;
+  RNSVGSvgViewProps(const PropsParserContext& context, const RNSVGSvgViewProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  folly::dynamic bbWidth{};
+  folly::dynamic bbHeight{};
+  Float minX{0.0};
+  Float minY{0.0};
+  Float vbWidth{0.0};
+  Float vbHeight{0.0};
+  std::string align{};
+  int meetOrSlice{0};
+  SharedColor color{};
+  std::string pointerEvents{};
+  folly::dynamic hitSlop{};
+};
+
+class RNSVGLinearGradientProps final : public ViewProps {
+ public:
+  RNSVGLinearGradientProps() = default;
+  RNSVGLinearGradientProps(const PropsParserContext& context, const RNSVGLinearGradientProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  folly::dynamic x1{};
+  folly::dynamic y1{};
+  folly::dynamic x2{};
+  folly::dynamic y2{};
+  std::vector<Float> gradient{};
+  int gradientUnits{0};
+  std::vector<Float> gradientTransform{};
+};
+
+class RNSVGLineProps final : public ViewProps {
+ public:
+  RNSVGLineProps() = default;
+  RNSVGLineProps(const PropsParserContext& context, const RNSVGLineProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic x1{};
+  folly::dynamic y1{};
+  folly::dynamic x2{};
+  folly::dynamic y2{};
+};
+
+class RNSVGMarkerProps final : public ViewProps {
+ public:
+  RNSVGMarkerProps() = default;
+  RNSVGMarkerProps(const PropsParserContext& context, const RNSVGMarkerProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic fontSize{};
+  folly::dynamic fontWeight{};
+  folly::dynamic font{};
+  folly::dynamic refX{};
+  folly::dynamic refY{};
+  folly::dynamic markerHeight{};
+  folly::dynamic markerWidth{};
+  std::string markerUnits{};
+  std::string orient{};
+  Float minX{0.0};
+  Float minY{0.0};
+  Float vbWidth{0.0};
+  Float vbHeight{0.0};
+  std::string align{};
+  int meetOrSlice{0};
+};
+
+class RNSVGMaskProps final : public ViewProps {
+ public:
+  RNSVGMaskProps() = default;
+  RNSVGMaskProps(const PropsParserContext& context, const RNSVGMaskProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic fontSize{};
+  folly::dynamic fontWeight{};
+  folly::dynamic font{};
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic height{};
+  folly::dynamic width{};
+  int maskUnits{0};
+  int maskContentUnits{0};
+  int maskType{0};
+};
+
+class RNSVGPathProps final : public ViewProps {
+ public:
+  RNSVGPathProps() = default;
+  RNSVGPathProps(const PropsParserContext& context, const RNSVGPathProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  std::string d{};
+};
+
+class RNSVGPatternProps final : public ViewProps {
+ public:
+  RNSVGPatternProps() = default;
+  RNSVGPatternProps(const PropsParserContext& context, const RNSVGPatternProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic fontSize{};
+  folly::dynamic fontWeight{};
+  folly::dynamic font{};
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic height{};
+  folly::dynamic width{};
+  int patternUnits{0};
+  int patternContentUnits{0};
+  std::vector<Float> patternTransform{};
+  Float minX{0.0};
+  Float minY{0.0};
+  Float vbWidth{0.0};
+  Float vbHeight{0.0};
+  std::string align{};
+  int meetOrSlice{0};
+};
+
+class RNSVGRadialGradientProps final : public ViewProps {
+ public:
+  RNSVGRadialGradientProps() = default;
+  RNSVGRadialGradientProps(const PropsParserContext& context, const RNSVGRadialGradientProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  folly::dynamic fx{};
+  folly::dynamic fy{};
+  folly::dynamic cx{};
+  folly::dynamic cy{};
+  folly::dynamic rx{};
+  folly::dynamic ry{};
+  std::vector<Float> gradient{};
+  int gradientUnits{0};
+  std::vector<Float> gradientTransform{};
+};
+
+class RNSVGRectProps final : public ViewProps {
+ public:
+  RNSVGRectProps() = default;
+  RNSVGRectProps(const PropsParserContext& context, const RNSVGRectProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic height{};
+  folly::dynamic width{};
+  folly::dynamic rx{};
+  folly::dynamic ry{};
+};
+
+class RNSVGSymbolProps final : public ViewProps {
+ public:
+  RNSVGSymbolProps() = default;
+  RNSVGSymbolProps(const PropsParserContext& context, const RNSVGSymbolProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic fontSize{};
+  folly::dynamic fontWeight{};
+  folly::dynamic font{};
+  Float minX{0.0};
+  Float minY{0.0};
+  Float vbWidth{0.0};
+  Float vbHeight{0.0};
+  std::string align{};
+  int meetOrSlice{0};
+};
+
+class RNSVGTextProps final : public ViewProps {
+ public:
+  RNSVGTextProps() = default;
+  RNSVGTextProps(const PropsParserContext& context, const RNSVGTextProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic fontSize{};
+  folly::dynamic fontWeight{};
+  folly::dynamic font{};
+  folly::dynamic dx{};
+  folly::dynamic dy{};
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic rotate{};
+  folly::dynamic inlineSize{};
+  folly::dynamic textLength{};
+  folly::dynamic baselineShift{};
+  std::string lengthAdjust{};
+  std::string alignmentBaseline{};
+  folly::dynamic verticalAlign{};
+};
+
+class RNSVGTextPathProps final : public ViewProps {
+ public:
+  RNSVGTextPathProps() = default;
+  RNSVGTextPathProps(const PropsParserContext& context, const RNSVGTextPathProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic fontSize{};
+  folly::dynamic fontWeight{};
+  folly::dynamic font{};
+  folly::dynamic dx{};
+  folly::dynamic dy{};
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic rotate{};
+  folly::dynamic inlineSize{};
+  folly::dynamic textLength{};
+  folly::dynamic baselineShift{};
+  std::string lengthAdjust{};
+  std::string alignmentBaseline{};
+  folly::dynamic verticalAlign{};
+  std::string href{};
+  std::string side{};
+  std::string method{};
+  std::string midLine{};
+  std::string spacing{};
+  folly::dynamic startOffset{};
+};
+
+class RNSVGTSpanProps final : public ViewProps {
+ public:
+  RNSVGTSpanProps() = default;
+  RNSVGTSpanProps(const PropsParserContext& context, const RNSVGTSpanProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  folly::dynamic fontSize{};
+  folly::dynamic fontWeight{};
+  folly::dynamic font{};
+  folly::dynamic dx{};
+  folly::dynamic dy{};
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic rotate{};
+  folly::dynamic inlineSize{};
+  folly::dynamic textLength{};
+  folly::dynamic baselineShift{};
+  std::string lengthAdjust{};
+  std::string alignmentBaseline{};
+  folly::dynamic verticalAlign{};
+  std::string content{};
+};
+
+class RNSVGUseProps final : public ViewProps {
+ public:
+  RNSVGUseProps() = default;
+  RNSVGUseProps(const PropsParserContext& context, const RNSVGUseProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  SharedColor color{};
+  folly::dynamic fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  folly::dynamic stroke{};
+  Float strokeOpacity{1.0};
+  folly::dynamic strokeWidth{};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  folly::dynamic strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string filter{};
+  std::string href{};
+  folly::dynamic x{};
+  folly::dynamic y{};
+  folly::dynamic height{};
+  folly::dynamic width{};
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.cpp
new file mode 100644
index 0000000..d331b21
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.cpp
@@ -0,0 +1,18 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/rnsvg/ShadowNodes.h>
+
+namespace facebook::react {
+
+extern const char RNSVGSvgViewAndroidComponentName[] = "RNSVGSvgViewAndroid";
+extern const char RNSVGSvgViewComponentName[] = "RNSVGSvgView";
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.h
new file mode 100644
index 0000000..f82c5df
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.h
@@ -0,0 +1,43 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/rnsvg/EventEmitters.h>
+#include <react/renderer/components/rnsvg/Props.h>
+#include <react/renderer/components/rnsvg/States.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+#include <jsi/jsi.h>
+
+namespace facebook::react {
+
+JSI_EXPORT extern const char RNSVGSvgViewAndroidComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGSvgViewAndroid> component.
+ */
+using RNSVGSvgViewAndroidShadowNode = ConcreteViewShadowNode<
+    RNSVGSvgViewAndroidComponentName,
+    RNSVGSvgViewAndroidProps,
+    RNSVGSvgViewAndroidEventEmitter,
+    RNSVGSvgViewAndroidState>;
+
+JSI_EXPORT extern const char RNSVGSvgViewComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGSvgView> component.
+ */
+using RNSVGSvgViewShadowNode = ConcreteViewShadowNode<
+    RNSVGSvgViewComponentName,
+    RNSVGSvgViewProps,
+    RNSVGSvgViewEventEmitter,
+    RNSVGSvgViewState>;
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.cpp
new file mode 100644
index 0000000..a36fa6f
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.cpp
@@ -0,0 +1,16 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateStateCpp.js
+ */
+#include <react/renderer/components/rnsvg/States.h>
+
+namespace facebook::react {
+
+
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.h
new file mode 100644
index 0000000..07176c1
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.h
@@ -0,0 +1,41 @@
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateStateH.js
+ */
+#pragma once
+
+#ifdef ANDROID
+#include <folly/dynamic.h>
+#endif
+
+namespace facebook::react {
+
+class RNSVGSvgViewAndroidState {
+public:
+  RNSVGSvgViewAndroidState() = default;
+
+#ifdef ANDROID
+  RNSVGSvgViewAndroidState(RNSVGSvgViewAndroidState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGSvgViewState {
+public:
+  RNSVGSvgViewState() = default;
+
+#ifdef ANDROID
+  RNSVGSvgViewState(RNSVGSvgViewState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+} // namespace facebook::react
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI-generated.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI-generated.cpp
new file mode 100644
index 0000000..a4b461a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI-generated.cpp
@@ -0,0 +1,94 @@
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleCpp.js
+ */
+
+#include "rnsvgJSI.h"
+
+namespace facebook::react {
+
+static jsi::Value __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_isPointInFill(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSvgRenderableModuleCxxSpecJSI *>(&turboModule)->isPointInFill(
+    rt,
+    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
+    count <= 1 || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt))
+  );
+}
+static jsi::Value __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_isPointInStroke(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSvgRenderableModuleCxxSpecJSI *>(&turboModule)->isPointInStroke(
+    rt,
+    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
+    count <= 1 || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt))
+  );
+}
+static jsi::Value __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getTotalLength(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSvgRenderableModuleCxxSpecJSI *>(&turboModule)->getTotalLength(
+    rt,
+    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
+  );
+}
+static jsi::Value __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getPointAtLength(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSvgRenderableModuleCxxSpecJSI *>(&turboModule)->getPointAtLength(
+    rt,
+    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
+    count <= 1 || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt))
+  );
+}
+static jsi::Value __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getBBox(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSvgRenderableModuleCxxSpecJSI *>(&turboModule)->getBBox(
+    rt,
+    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
+    count <= 1 || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt))
+  );
+}
+static jsi::Value __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getCTM(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSvgRenderableModuleCxxSpecJSI *>(&turboModule)->getCTM(
+    rt,
+    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
+  );
+}
+static jsi::Value __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getScreenCTM(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSvgRenderableModuleCxxSpecJSI *>(&turboModule)->getScreenCTM(
+    rt,
+    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
+  );
+}
+static jsi::Value __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getRawResource(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSvgRenderableModuleCxxSpecJSI *>(&turboModule)->getRawResource(
+    rt,
+    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
+  );
+}
+
+NativeSvgRenderableModuleCxxSpecJSI::NativeSvgRenderableModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule("RNSVGRenderableModule", jsInvoker) {
+  methodMap_["isPointInFill"] = MethodMetadata {2, __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_isPointInFill};
+  methodMap_["isPointInStroke"] = MethodMetadata {2, __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_isPointInStroke};
+  methodMap_["getTotalLength"] = MethodMetadata {1, __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getTotalLength};
+  methodMap_["getPointAtLength"] = MethodMetadata {2, __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getPointAtLength};
+  methodMap_["getBBox"] = MethodMetadata {2, __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getBBox};
+  methodMap_["getCTM"] = MethodMetadata {1, __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getCTM};
+  methodMap_["getScreenCTM"] = MethodMetadata {1, __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getScreenCTM};
+  methodMap_["getRawResource"] = MethodMetadata {1, __hostFunction_NativeSvgRenderableModuleCxxSpecJSI_getRawResource};
+}
+static jsi::Value __hostFunction_NativeSvgViewModuleCxxSpecJSI_toDataURL(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeSvgViewModuleCxxSpecJSI *>(&turboModule)->toDataURL(
+    rt,
+    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
+    count <= 1 || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt)),
+    count <= 2 || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asObject(rt).asFunction(rt))
+  );
+  return jsi::Value::undefined();
+}
+
+NativeSvgViewModuleCxxSpecJSI::NativeSvgViewModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule("RNSVGSvgViewModule", jsInvoker) {
+  methodMap_["toDataURL"] = MethodMetadata {3, __hostFunction_NativeSvgViewModuleCxxSpecJSI_toDataURL};
+}
+
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI.h
new file mode 100644
index 0000000..8bcdf45
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI.h
@@ -0,0 +1,365 @@
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/TurboModule.h>
+#include <react/bridging/Bridging.h>
+
+namespace facebook::react {
+
+
+  
+#pragma mark - NativeSvgRenderableModuleMatrix
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5>
+struct NativeSvgRenderableModuleMatrix {
+  P0 a;
+  P1 b;
+  P2 c;
+  P3 d;
+  P4 e;
+  P5 f;
+  bool operator==(const NativeSvgRenderableModuleMatrix &other) const {
+    return a == other.a && b == other.b && c == other.c && d == other.d && e == other.e && f == other.f;
+  }
+};
+
+template <typename T>
+struct NativeSvgRenderableModuleMatrixBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.a)>(rt, value.getProperty(rt, "a"), jsInvoker),
+      bridging::fromJs<decltype(types.b)>(rt, value.getProperty(rt, "b"), jsInvoker),
+      bridging::fromJs<decltype(types.c)>(rt, value.getProperty(rt, "c"), jsInvoker),
+      bridging::fromJs<decltype(types.d)>(rt, value.getProperty(rt, "d"), jsInvoker),
+      bridging::fromJs<decltype(types.e)>(rt, value.getProperty(rt, "e"), jsInvoker),
+      bridging::fromJs<decltype(types.f)>(rt, value.getProperty(rt, "f"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double aToJs(jsi::Runtime &rt, decltype(types.a) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double bToJs(jsi::Runtime &rt, decltype(types.b) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double cToJs(jsi::Runtime &rt, decltype(types.c) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double dToJs(jsi::Runtime &rt, decltype(types.d) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double eToJs(jsi::Runtime &rt, decltype(types.e) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double fToJs(jsi::Runtime &rt, decltype(types.f) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "a", bridging::toJs(rt, value.a, jsInvoker));
+    result.setProperty(rt, "b", bridging::toJs(rt, value.b, jsInvoker));
+    result.setProperty(rt, "c", bridging::toJs(rt, value.c, jsInvoker));
+    result.setProperty(rt, "d", bridging::toJs(rt, value.d, jsInvoker));
+    result.setProperty(rt, "e", bridging::toJs(rt, value.e, jsInvoker));
+    result.setProperty(rt, "f", bridging::toJs(rt, value.f, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - NativeSvgRenderableModulePoint
+
+template <typename P0, typename P1>
+struct NativeSvgRenderableModulePoint {
+  P0 x;
+  P1 y;
+  bool operator==(const NativeSvgRenderableModulePoint &other) const {
+    return x == other.x && y == other.y;
+  }
+};
+
+template <typename T>
+struct NativeSvgRenderableModulePointBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.x)>(rt, value.getProperty(rt, "x"), jsInvoker),
+      bridging::fromJs<decltype(types.y)>(rt, value.getProperty(rt, "y"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double xToJs(jsi::Runtime &rt, decltype(types.x) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double yToJs(jsi::Runtime &rt, decltype(types.y) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "x", bridging::toJs(rt, value.x, jsInvoker));
+    result.setProperty(rt, "y", bridging::toJs(rt, value.y, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - NativeSvgRenderableModuleRect
+
+template <typename P0, typename P1, typename P2, typename P3>
+struct NativeSvgRenderableModuleRect {
+  P0 x;
+  P1 y;
+  P2 width;
+  P3 height;
+  bool operator==(const NativeSvgRenderableModuleRect &other) const {
+    return x == other.x && y == other.y && width == other.width && height == other.height;
+  }
+};
+
+template <typename T>
+struct NativeSvgRenderableModuleRectBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.x)>(rt, value.getProperty(rt, "x"), jsInvoker),
+      bridging::fromJs<decltype(types.y)>(rt, value.getProperty(rt, "y"), jsInvoker),
+      bridging::fromJs<decltype(types.width)>(rt, value.getProperty(rt, "width"), jsInvoker),
+      bridging::fromJs<decltype(types.height)>(rt, value.getProperty(rt, "height"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double xToJs(jsi::Runtime &rt, decltype(types.x) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double yToJs(jsi::Runtime &rt, decltype(types.y) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double widthToJs(jsi::Runtime &rt, decltype(types.width) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double heightToJs(jsi::Runtime &rt, decltype(types.height) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "x", bridging::toJs(rt, value.x, jsInvoker));
+    result.setProperty(rt, "y", bridging::toJs(rt, value.y, jsInvoker));
+    result.setProperty(rt, "width", bridging::toJs(rt, value.width, jsInvoker));
+    result.setProperty(rt, "height", bridging::toJs(rt, value.height, jsInvoker));
+    return result;
+  }
+};
+
+class JSI_EXPORT NativeSvgRenderableModuleCxxSpecJSI : public TurboModule {
+protected:
+  NativeSvgRenderableModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+  virtual bool isPointInFill(jsi::Runtime &rt, std::optional<double> tag, std::optional<jsi::Object> options) = 0;
+  virtual bool isPointInStroke(jsi::Runtime &rt, std::optional<double> tag, std::optional<jsi::Object> options) = 0;
+  virtual double getTotalLength(jsi::Runtime &rt, std::optional<double> tag) = 0;
+  virtual jsi::Object getPointAtLength(jsi::Runtime &rt, std::optional<double> tag, std::optional<jsi::Object> options) = 0;
+  virtual jsi::Object getBBox(jsi::Runtime &rt, std::optional<double> tag, std::optional<jsi::Object> options) = 0;
+  virtual jsi::Object getCTM(jsi::Runtime &rt, std::optional<double> tag) = 0;
+  virtual jsi::Object getScreenCTM(jsi::Runtime &rt, std::optional<double> tag) = 0;
+  virtual jsi::Value getRawResource(jsi::Runtime &rt, jsi::String name) = 0;
+
+};
+
+template <typename T>
+class JSI_EXPORT NativeSvgRenderableModuleCxxSpec : public TurboModule {
+public:
+  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
+    return delegate_.get(rt, propName);
+  }
+
+  static constexpr std::string_view kModuleName = "RNSVGRenderableModule";
+
+protected:
+  NativeSvgRenderableModuleCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
+    : TurboModule(std::string{NativeSvgRenderableModuleCxxSpec::kModuleName}, jsInvoker),
+      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}
+
+
+private:
+  class Delegate : public NativeSvgRenderableModuleCxxSpecJSI {
+  public:
+    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
+      NativeSvgRenderableModuleCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {
+
+    }
+
+    bool isPointInFill(jsi::Runtime &rt, std::optional<double> tag, std::optional<jsi::Object> options) override {
+      static_assert(
+          bridging::getParameterCount(&T::isPointInFill) == 3,
+          "Expected isPointInFill(...) to have 3 parameters");
+
+      return bridging::callFromJs<bool>(
+          rt, &T::isPointInFill, jsInvoker_, instance_, std::move(tag), std::move(options));
+    }
+    bool isPointInStroke(jsi::Runtime &rt, std::optional<double> tag, std::optional<jsi::Object> options) override {
+      static_assert(
+          bridging::getParameterCount(&T::isPointInStroke) == 3,
+          "Expected isPointInStroke(...) to have 3 parameters");
+
+      return bridging::callFromJs<bool>(
+          rt, &T::isPointInStroke, jsInvoker_, instance_, std::move(tag), std::move(options));
+    }
+    double getTotalLength(jsi::Runtime &rt, std::optional<double> tag) override {
+      static_assert(
+          bridging::getParameterCount(&T::getTotalLength) == 2,
+          "Expected getTotalLength(...) to have 2 parameters");
+
+      return bridging::callFromJs<double>(
+          rt, &T::getTotalLength, jsInvoker_, instance_, std::move(tag));
+    }
+    jsi::Object getPointAtLength(jsi::Runtime &rt, std::optional<double> tag, std::optional<jsi::Object> options) override {
+      static_assert(
+          bridging::getParameterCount(&T::getPointAtLength) == 3,
+          "Expected getPointAtLength(...) to have 3 parameters");
+
+      return bridging::callFromJs<jsi::Object>(
+          rt, &T::getPointAtLength, jsInvoker_, instance_, std::move(tag), std::move(options));
+    }
+    jsi::Object getBBox(jsi::Runtime &rt, std::optional<double> tag, std::optional<jsi::Object> options) override {
+      static_assert(
+          bridging::getParameterCount(&T::getBBox) == 3,
+          "Expected getBBox(...) to have 3 parameters");
+
+      return bridging::callFromJs<jsi::Object>(
+          rt, &T::getBBox, jsInvoker_, instance_, std::move(tag), std::move(options));
+    }
+    jsi::Object getCTM(jsi::Runtime &rt, std::optional<double> tag) override {
+      static_assert(
+          bridging::getParameterCount(&T::getCTM) == 2,
+          "Expected getCTM(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Object>(
+          rt, &T::getCTM, jsInvoker_, instance_, std::move(tag));
+    }
+    jsi::Object getScreenCTM(jsi::Runtime &rt, std::optional<double> tag) override {
+      static_assert(
+          bridging::getParameterCount(&T::getScreenCTM) == 2,
+          "Expected getScreenCTM(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Object>(
+          rt, &T::getScreenCTM, jsInvoker_, instance_, std::move(tag));
+    }
+    jsi::Value getRawResource(jsi::Runtime &rt, jsi::String name) override {
+      static_assert(
+          bridging::getParameterCount(&T::getRawResource) == 2,
+          "Expected getRawResource(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::getRawResource, jsInvoker_, instance_, std::move(name));
+    }
+
+  private:
+    friend class NativeSvgRenderableModuleCxxSpec;
+    T *instance_;
+  };
+
+  Delegate delegate_;
+};
+
+
+  class JSI_EXPORT NativeSvgViewModuleCxxSpecJSI : public TurboModule {
+protected:
+  NativeSvgViewModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+  virtual void toDataURL(jsi::Runtime &rt, std::optional<double> tag, std::optional<jsi::Object> options, std::optional<jsi::Function> callback) = 0;
+
+};
+
+template <typename T>
+class JSI_EXPORT NativeSvgViewModuleCxxSpec : public TurboModule {
+public:
+  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
+    return delegate_.get(rt, propName);
+  }
+
+  static constexpr std::string_view kModuleName = "RNSVGSvgViewModule";
+
+protected:
+  NativeSvgViewModuleCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
+    : TurboModule(std::string{NativeSvgViewModuleCxxSpec::kModuleName}, jsInvoker),
+      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}
+
+
+private:
+  class Delegate : public NativeSvgViewModuleCxxSpecJSI {
+  public:
+    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
+      NativeSvgViewModuleCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {
+
+    }
+
+    void toDataURL(jsi::Runtime &rt, std::optional<double> tag, std::optional<jsi::Object> options, std::optional<jsi::Function> callback) override {
+      static_assert(
+          bridging::getParameterCount(&T::toDataURL) == 4,
+          "Expected toDataURL(...) to have 4 parameters");
+
+      return bridging::callFromJs<void>(
+          rt, &T::toDataURL, jsInvoker_, instance_, std::move(tag), std::move(options), std::move(callback));
+    }
+
+  private:
+    friend class NativeSvgViewModuleCxxSpec;
+    T *instance_;
+  };
+
+  Delegate delegate_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg-generated.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg-generated.cpp
new file mode 100644
index 0000000..1b0dc88
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg-generated.cpp
@@ -0,0 +1,86 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleJniCpp.js
+ */
+
+#include "rnsvg.h"
+
+namespace facebook::react {
+
+static facebook::jsi::Value __hostFunction_NativeSvgRenderableModuleSpecJSI_isPointInFill(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, BooleanKind, "isPointInFill", "(Ljava/lang/Double;Lcom/facebook/react/bridge/ReadableMap;)Z", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSvgRenderableModuleSpecJSI_isPointInStroke(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, BooleanKind, "isPointInStroke", "(Ljava/lang/Double;Lcom/facebook/react/bridge/ReadableMap;)Z", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSvgRenderableModuleSpecJSI_getTotalLength(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, NumberKind, "getTotalLength", "(Ljava/lang/Double;)D", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSvgRenderableModuleSpecJSI_getPointAtLength(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, "getPointAtLength", "(Ljava/lang/Double;Lcom/facebook/react/bridge/ReadableMap;)Lcom/facebook/react/bridge/WritableMap;", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSvgRenderableModuleSpecJSI_getBBox(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, "getBBox", "(Ljava/lang/Double;Lcom/facebook/react/bridge/ReadableMap;)Lcom/facebook/react/bridge/WritableMap;", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSvgRenderableModuleSpecJSI_getCTM(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, "getCTM", "(Ljava/lang/Double;)Lcom/facebook/react/bridge/WritableMap;", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSvgRenderableModuleSpecJSI_getScreenCTM(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, "getScreenCTM", "(Ljava/lang/Double;)Lcom/facebook/react/bridge/WritableMap;", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSvgRenderableModuleSpecJSI_getRawResource(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getRawResource", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+NativeSvgRenderableModuleSpecJSI::NativeSvgRenderableModuleSpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+  methodMap_["isPointInFill"] = MethodMetadata {2, __hostFunction_NativeSvgRenderableModuleSpecJSI_isPointInFill};
+  methodMap_["isPointInStroke"] = MethodMetadata {2, __hostFunction_NativeSvgRenderableModuleSpecJSI_isPointInStroke};
+  methodMap_["getTotalLength"] = MethodMetadata {1, __hostFunction_NativeSvgRenderableModuleSpecJSI_getTotalLength};
+  methodMap_["getPointAtLength"] = MethodMetadata {2, __hostFunction_NativeSvgRenderableModuleSpecJSI_getPointAtLength};
+  methodMap_["getBBox"] = MethodMetadata {2, __hostFunction_NativeSvgRenderableModuleSpecJSI_getBBox};
+  methodMap_["getCTM"] = MethodMetadata {1, __hostFunction_NativeSvgRenderableModuleSpecJSI_getCTM};
+  methodMap_["getScreenCTM"] = MethodMetadata {1, __hostFunction_NativeSvgRenderableModuleSpecJSI_getScreenCTM};
+  methodMap_["getRawResource"] = MethodMetadata {1, __hostFunction_NativeSvgRenderableModuleSpecJSI_getRawResource};
+}
+static facebook::jsi::Value __hostFunction_NativeSvgViewModuleSpecJSI_toDataURL(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "toDataURL", "(Ljava/lang/Double;Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Callback;)V", args, count, cachedMethodId);
+}
+
+NativeSvgViewModuleSpecJSI::NativeSvgViewModuleSpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+  methodMap_["toDataURL"] = MethodMetadata {3, __hostFunction_NativeSvgViewModuleSpecJSI_toDataURL};
+}
+
+std::shared_ptr<TurboModule> rnsvg_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params) {
+  if (moduleName == "RNSVGRenderableModule") {
+    return std::make_shared<NativeSvgRenderableModuleSpecJSI>(params);
+  }
+  if (moduleName == "RNSVGSvgViewModule") {
+    return std::make_shared<NativeSvgViewModuleSpecJSI>(params);
+  }
+  return nullptr;
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg.h
new file mode 100644
index 0000000..3b04b7a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg.h
@@ -0,0 +1,39 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleJniH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/TurboModule.h>
+#include <jsi/jsi.h>
+
+namespace facebook::react {
+
+/**
+ * JNI C++ class for module 'NativeSvgRenderableModule'
+ */
+class JSI_EXPORT NativeSvgRenderableModuleSpecJSI : public JavaTurboModule {
+public:
+  NativeSvgRenderableModuleSpecJSI(const JavaTurboModule::InitParams &params);
+};
+
+/**
+ * JNI C++ class for module 'NativeSvgViewModule'
+ */
+class JSI_EXPORT NativeSvgViewModuleSpecJSI : public JavaTurboModule {
+public:
+  NativeSvgViewModuleSpecJSI(const JavaTurboModule::InitParams &params);
+};
+
+
+JSI_EXPORT
+std::shared_ptr<TurboModule> rnsvg_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params);
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/schema.json b/node_modules/react-native-svg/android/build/generated/source/codegen/schema.json
new file mode 100644
index 0000000..2e29c07
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/schema.json
@@ -0,0 +1,7144 @@
+{
+  "modules": {
+    "RNSVGSvgViewAndroid": {
+      "type": "Component",
+      "components": {
+        "RNSVGSvgViewAndroid": {
+          "excludedPlatforms": [
+            "iOS"
+          ],
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "bbWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "bbHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "minX",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "minY",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "align",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "meetOrSlice",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "hasTVPreferredFocus",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "borderBottomColor",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "nextFocusDown",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "borderRightColor",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "nextFocusRight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "borderLeftColor",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "borderColor",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "removeClippedSubviews",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "nextFocusForward",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "nextFocusUp",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "accessible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "borderStartColor",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "borderEndColor",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "focusable",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "nativeBackgroundAndroid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "color",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "FloatTypeAnnotation",
+                      "default": 0
+                    }
+                  },
+                  {
+                    "name": "borderless",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "BooleanTypeAnnotation",
+                      "default": false
+                    }
+                  },
+                  {
+                    "name": "rippleRadius",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "FloatTypeAnnotation",
+                      "default": 0
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "nativeForegroundAndroid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "color",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "FloatTypeAnnotation",
+                      "default": 0
+                    }
+                  },
+                  {
+                    "name": "borderless",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "BooleanTypeAnnotation",
+                      "default": false
+                    }
+                  },
+                  {
+                    "name": "rippleRadius",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "FloatTypeAnnotation",
+                      "default": 0
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "backfaceVisibility",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "borderStyle",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "needsOffscreenAlphaCompositing",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "hitSlop",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderTopColor",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "nextFocusLeft",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "borderBlockColor",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "borderBlockEndColor",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "borderBlockStartColor",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "borderRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderTopLeftRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderTopRightRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderBottomRightRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderBottomLeftRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderTopStartRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderTopEndRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderBottomStartRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderBottomEndRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderEndEndRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderEndStartRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderStartEndRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "borderStartStartRadius",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGCircle": {
+      "type": "Component",
+      "components": {
+        "RNSVGCircle": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "cx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "cy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "r",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGClipPath": {
+      "type": "Component",
+      "components": {
+        "RNSVGClipPath": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGDefs": {
+      "type": "Component",
+      "components": {
+        "RNSVGDefs": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGEllipse": {
+      "type": "Component",
+      "components": {
+        "RNSVGEllipse": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "cx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "cy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "rx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "ry",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGFeBlend": {
+      "type": "Component",
+      "components": {
+        "RNSVGFeBlend": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "result",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "in1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "in2",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "mode",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringEnumTypeAnnotation",
+                "default": "normal",
+                "options": [
+                  "unknown",
+                  "normal",
+                  "multiply",
+                  "screen",
+                  "darken",
+                  "lighten"
+                ]
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGFeColorMatrix": {
+      "type": "Component",
+      "components": {
+        "RNSVGFeColorMatrix": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "result",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "in1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "type",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringEnumTypeAnnotation",
+                "default": "matrix",
+                "options": [
+                  "matrix",
+                  "saturate",
+                  "hueRotate",
+                  "luminanceToAlpha"
+                ]
+              }
+            },
+            {
+              "name": "values",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGFeComposite": {
+      "type": "Component",
+      "components": {
+        "RNSVGFeComposite": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "result",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "in1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "in2",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "operator1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringEnumTypeAnnotation",
+                "default": "over",
+                "options": [
+                  "over",
+                  "in",
+                  "out",
+                  "atop",
+                  "xor",
+                  "arithmetic"
+                ]
+              }
+            },
+            {
+              "name": "k1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "k2",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "k3",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "k4",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGFeFlood": {
+      "type": "Component",
+      "components": {
+        "RNSVGFeFlood": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "result",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "floodColor",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "floodOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGFeGaussianBlur": {
+      "type": "Component",
+      "components": {
+        "RNSVGFeGaussianBlur": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "result",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "in1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "stdDeviationX",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "stdDeviationY",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "edgeMode",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringEnumTypeAnnotation",
+                "default": "none",
+                "options": [
+                  "duplicate",
+                  "wrap",
+                  "none"
+                ]
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGFeMerge": {
+      "type": "Component",
+      "components": {
+        "RNSVGFeMerge": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "result",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "nodes",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGFeOffset": {
+      "type": "Component",
+      "components": {
+        "RNSVGFeOffset": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "result",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "in1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "dx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "dy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGFilter": {
+      "type": "Component",
+      "components": {
+        "RNSVGFilter": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "filterUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringEnumTypeAnnotation",
+                "default": "objectBoundingBox",
+                "options": [
+                  "userSpaceOnUse",
+                  "objectBoundingBox"
+                ]
+              }
+            },
+            {
+              "name": "primitiveUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringEnumTypeAnnotation",
+                "default": "userSpaceOnUse",
+                "options": [
+                  "userSpaceOnUse",
+                  "objectBoundingBox"
+                ]
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGForeignObject": {
+      "type": "Component",
+      "components": {
+        "RNSVGForeignObject": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGGroup": {
+      "type": "Component",
+      "components": {
+        "RNSVGGroup": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGImage": {
+      "type": "Component",
+      "components": {
+        "RNSVGImage": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [
+            {
+              "name": "onLoad",
+              "optional": true,
+              "bubblingType": "direct",
+              "typeAnnotation": {
+                "type": "EventTypeAnnotation",
+                "argument": {
+                  "type": "ObjectTypeAnnotation",
+                  "properties": [
+                    {
+                      "name": "source",
+                      "optional": false,
+                      "typeAnnotation": {
+                        "type": "ObjectTypeAnnotation",
+                        "properties": [
+                          {
+                            "name": "width",
+                            "optional": false,
+                            "typeAnnotation": {
+                              "type": "FloatTypeAnnotation"
+                            }
+                          },
+                          {
+                            "name": "height",
+                            "optional": false,
+                            "typeAnnotation": {
+                              "type": "FloatTypeAnnotation"
+                            }
+                          },
+                          {
+                            "name": "uri",
+                            "optional": false,
+                            "typeAnnotation": {
+                              "type": "StringTypeAnnotation"
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            }
+          ],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "src",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ImageSourcePrimitive"
+              }
+            },
+            {
+              "name": "align",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "meetOrSlice",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGSvgView": {
+      "type": "Component",
+      "components": {
+        "RNSVGSvgView": {
+          "excludedPlatforms": [
+            "android"
+          ],
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "bbWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "bbHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "minX",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "minY",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "align",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "meetOrSlice",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "hitSlop",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGLinearGradient": {
+      "type": "Component",
+      "components": {
+        "RNSVGLinearGradient": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "x1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "x2",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y2",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "gradient",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "gradientUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "gradientTransform",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGLine": {
+      "type": "Component",
+      "components": {
+        "RNSVGLine": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "x1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "x2",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y2",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGMarker": {
+      "type": "Component",
+      "components": {
+        "RNSVGMarker": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "refX",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "refY",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "markerHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "markerWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "markerUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "orient",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "minX",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "minY",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "align",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "meetOrSlice",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGMask": {
+      "type": "Component",
+      "components": {
+        "RNSVGMask": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "maskUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "maskContentUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "maskType",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "NativeSvgRenderableModule": {
+      "type": "NativeModule",
+      "aliasMap": {
+        "Matrix": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "a",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            },
+            {
+              "name": "b",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            },
+            {
+              "name": "c",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            },
+            {
+              "name": "d",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            },
+            {
+              "name": "e",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            },
+            {
+              "name": "f",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "Point": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "x",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "Rect": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "x",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              }
+            }
+          ]
+        }
+      },
+      "enumMap": {},
+      "spec": {
+        "eventEmitters": [],
+        "methods": [
+          {
+            "name": "isPointInFill",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              },
+              "params": [
+                {
+                  "name": "tag",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NullableTypeAnnotation",
+                    "typeAnnotation": {
+                      "type": "DoubleTypeAnnotation"
+                    }
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": true,
+                  "typeAnnotation": {
+                    "type": "GenericObjectTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "isPointInStroke",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              },
+              "params": [
+                {
+                  "name": "tag",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NullableTypeAnnotation",
+                    "typeAnnotation": {
+                      "type": "DoubleTypeAnnotation"
+                    }
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": true,
+                  "typeAnnotation": {
+                    "type": "GenericObjectTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "getTotalLength",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "FloatTypeAnnotation"
+              },
+              "params": [
+                {
+                  "name": "tag",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NullableTypeAnnotation",
+                    "typeAnnotation": {
+                      "type": "DoubleTypeAnnotation"
+                    }
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "getPointAtLength",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "TypeAliasTypeAnnotation",
+                "name": "Point"
+              },
+              "params": [
+                {
+                  "name": "tag",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NullableTypeAnnotation",
+                    "typeAnnotation": {
+                      "type": "DoubleTypeAnnotation"
+                    }
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": true,
+                  "typeAnnotation": {
+                    "type": "GenericObjectTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "getBBox",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "TypeAliasTypeAnnotation",
+                "name": "Rect"
+              },
+              "params": [
+                {
+                  "name": "tag",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NullableTypeAnnotation",
+                    "typeAnnotation": {
+                      "type": "DoubleTypeAnnotation"
+                    }
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": true,
+                  "typeAnnotation": {
+                    "type": "GenericObjectTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "getCTM",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "TypeAliasTypeAnnotation",
+                "name": "Matrix"
+              },
+              "params": [
+                {
+                  "name": "tag",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NullableTypeAnnotation",
+                    "typeAnnotation": {
+                      "type": "DoubleTypeAnnotation"
+                    }
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "getScreenCTM",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "TypeAliasTypeAnnotation",
+                "name": "Matrix"
+              },
+              "params": [
+                {
+                  "name": "tag",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NullableTypeAnnotation",
+                    "typeAnnotation": {
+                      "type": "DoubleTypeAnnotation"
+                    }
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "getRawResource",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "name",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      "moduleName": "RNSVGRenderableModule"
+    },
+    "NativeSvgViewModule": {
+      "type": "NativeModule",
+      "aliasMap": {},
+      "enumMap": {},
+      "spec": {
+        "eventEmitters": [],
+        "methods": [
+          {
+            "name": "toDataURL",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "VoidTypeAnnotation"
+              },
+              "params": [
+                {
+                  "name": "tag",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NullableTypeAnnotation",
+                    "typeAnnotation": {
+                      "type": "DoubleTypeAnnotation"
+                    }
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": true,
+                  "typeAnnotation": {
+                    "type": "GenericObjectTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "callback",
+                  "optional": true,
+                  "typeAnnotation": {
+                    "type": "FunctionTypeAnnotation",
+                    "returnTypeAnnotation": {
+                      "type": "VoidTypeAnnotation"
+                    },
+                    "params": [
+                      {
+                        "name": "base64",
+                        "optional": false,
+                        "typeAnnotation": {
+                          "type": "StringTypeAnnotation"
+                        }
+                      }
+                    ]
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      "moduleName": "RNSVGSvgViewModule"
+    },
+    "RNSVGPath": {
+      "type": "Component",
+      "components": {
+        "RNSVGPath": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "d",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGPattern": {
+      "type": "Component",
+      "components": {
+        "RNSVGPattern": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "patternUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "patternContentUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "patternTransform",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "minX",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "minY",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "align",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "meetOrSlice",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGRadialGradient": {
+      "type": "Component",
+      "components": {
+        "RNSVGRadialGradient": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "cx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "cy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "rx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "ry",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "gradient",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "gradientUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "gradientTransform",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGRect": {
+      "type": "Component",
+      "components": {
+        "RNSVGRect": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "rx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "ry",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGSymbol": {
+      "type": "Component",
+      "components": {
+        "RNSVGSymbol": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "minX",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "minY",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "align",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "meetOrSlice",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGText": {
+      "type": "Component",
+      "components": {
+        "RNSVGText": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "dx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "dy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "rotate",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "inlineSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "textLength",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "baselineShift",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "lengthAdjust",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "alignmentBaseline",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "verticalAlign",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGTextPath": {
+      "type": "Component",
+      "components": {
+        "RNSVGTextPath": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "dx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "dy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "rotate",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "inlineSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "textLength",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "baselineShift",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "lengthAdjust",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "alignmentBaseline",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "verticalAlign",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "href",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "side",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "method",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "midLine",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "spacing",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "startOffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGTSpan": {
+      "type": "Component",
+      "components": {
+        "RNSVGTSpan": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "dx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "dy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "rotate",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "inlineSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "textLength",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "baselineShift",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "lengthAdjust",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "alignmentBaseline",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "verticalAlign",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "content",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGUse": {
+      "type": "Component",
+      "components": {
+        "RNSVGUse": {
+          "interfaceOnly": true,
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "color",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "filter",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "href",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "MixedTypeAnnotation"
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties b/node_modules/react-native-svg/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties
new file mode 100644
index 0000000..1211b1e
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties
@@ -0,0 +1,6 @@
+aarFormatVersion=1.0
+aarMetadataVersion=1.0
+minCompileSdk=1
+minCompileSdkExtension=0
+minAndroidGradlePluginVersion=1.0.0
+coreLibraryDesugaringEnabled=false
diff --git a/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties b/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
new file mode 100644
index 0000000..055761a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
@@ -0,0 +1 @@
+#Sat May 24 20:35:16 BRT 2025
diff --git a/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml b/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
new file mode 100644
index 0000000..970bbe7
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\kelve\OneDrive\Documentos\zoo_mobile\node_modules\react-native-svg\android\src\main\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main" generated-set="main$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\kelve\OneDrive\Documentos\zoo_mobile\node_modules\react-native-svg\android\src\main\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\kelve\OneDrive\Documentos\zoo_mobile\node_modules\react-native-svg\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug" generated-set="debug$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\kelve\OneDrive\Documentos\zoo_mobile\node_modules\react-native-svg\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\kelve\OneDrive\Documentos\zoo_mobile\node_modules\react-native-svg\android\build\generated\res\resValues\debug"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated" generated-set="generated$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\kelve\OneDrive\Documentos\zoo_mobile\node_modules\react-native-svg\android\build\generated\res\resValues\debug"/></dataSet><mergedItems/></merger>
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json b/node_modules/react-native-svg/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json
new file mode 100644
index 0000000..0637a08
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json
@@ -0,0 +1 @@
+[]
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt b/node_modules/react-native-svg/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt
new file mode 100644
index 0000000..08f4ebe
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt
@@ -0,0 +1 @@
+0 Warning/Error
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/src/main/AndroidManifest.xml b/node_modules/react-native-svg/android/src/main/AndroidManifest.xml
index c4e6c98..0fd6dad 100644
--- a/node_modules/react-native-svg/android/src/main/AndroidManifest.xml
+++ b/node_modules/react-native-svg/android/src/main/AndroidManifest.xml
@@ -1 +1,3 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"/>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
+    <application />
+</manifest>
